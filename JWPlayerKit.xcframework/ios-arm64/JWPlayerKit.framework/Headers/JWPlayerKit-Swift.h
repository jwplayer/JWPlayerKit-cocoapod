#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
#ifndef JWPLAYERKIT_SWIFT_H
#define JWPLAYERKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVKit;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="JWPlayerKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)













@protocol JWPlayer;
@class JWMediaSelectionOption;
@class JWVideoSource;
@class JWVisualQuality;
@class NSString;
@class JWTimeData;

/// This delegate listens for audio events.
SWIFT_PROTOCOL("_TtP11JWPlayerKit12JWAVDelegate_")
@protocol JWAVDelegate
/// Reports when the list of available audio tracks is updated.
/// note:
/// Analagous to the <code>onAudioTracks</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param levels An array containing descriptions of the available audio tracks.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player audioTracksUpdated:(NSArray<JWMediaSelectionOption *> * _Nonnull)levels;
/// Reports when the active audio track is changed.
/// note:
/// Analagous to the <code>onAudioTrackChanged</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param currentLevel The currently selected audio track, expressed as an index into the available audio tracks.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player audioTrackChanged:(NSInteger)currentLevel;
/// Reports when the list of available quality levels is updated. Happens shortly after a playlist item starts playing.
/// Not applicable for HLS.
/// note:
/// Analagous to the <code>onLevels</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param levels An array containing descriptions of the available quality levels.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player qualityLevelsUpdated:(NSArray<JWVideoSource *> * _Nonnull)levels;
/// Reports when the active quality level is changed. Happens in response to e.g. a user clicking the controlbar quality menu or calling setCurrentLevel. Not applicable for HLS.
/// note:
/// Analagous to the <code>onLevelsChanged</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param currentLevel The currently selected quality level, expressed as an index into the available quality levels.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player qualityLevelChanged:(NSInteger)currentLevel;
@optional
/// Reports when the active quality level is changed for HLS. This is different than qualityLevelChanged since this will trigger when adaptive streaming automatically shifts quality or when user shifts quality manually.
/// \param player The player emitting the event.
///
/// \param currentVisualQuality The current visual quality level.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player visualQualityChanged:(JWVisualQuality * _Nonnull)currentVisualQuality;
@required
/// Reports when caption options become available.
/// note:
/// Analagous to the <code>onCaptionList</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param options A list of available caption tracks.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player updatedCaptionList:(NSArray<JWMediaSelectionOption *> * _Nonnull)options;
/// Reports when a new caption track has been selected.
/// The supplied index is the newly selected caption track, and can be used to index into the list of options supplied by <code>updatedCaptionList</code>
/// note:
/// Analagous to the <code>onCaptionsChanged</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param index The index of the currently selected caption track.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player captionTrackChanged:(NSInteger)index;
/// Reports when a caption is being presented.
/// Multiple captions may be presented at the same time. These are considered separate lines, but each string may contain multiple lines as well, separated by newline characters.
/// \param player The player emitting the event.
///
/// \param caption A list of strings being displayed for the caption.
///
/// \param time The point in time the caption is being presented, and for how long the caption will stay on the screen. If <code>duration</code> is 0, the caption will stay on the screen until the next caption is displayed.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player captionPresented:(NSArray<NSString *> * _Nonnull)caption at:(JWTimeData * _Nonnull)time;
@end


/// Access log metadata. Fires when a new access log entry has been added
/// for the JWPlayerItem.
SWIFT_CLASS("_TtC11JWPlayerKit19JWAccessLogMetadata")
@interface JWAccessLogMetadata : NSObject
/// The empirical throughput across all media downloaded. Measured in bits per second.
/// note:
/// Value is <code>JWAccessLogMetadataUnknownBitrate</code> if unknown.
@property (nonatomic, readonly) double observedBitrate;
/// The throughput required to play the stream, as advertised by the server.
/// note:
/// Value is <code>JWAccessLogMetadataUnknownBitrate</code> if unknown.
@property (nonatomic, readonly) double indicatedBitrate;
/// The total number of dropped video frames.
/// note:
/// Value is <code>JWAccessLogMetadataUnknownDroppedFrames</code> if unknown.
@property (nonatomic, readonly) NSInteger droppedFrames;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Listens for new access log data from the player item
SWIFT_PROTOCOL("_TtP11JWPlayerKit27JWAccessLogMetadataDelegate_")
@protocol JWAccessLogMetadataDelegate
/// Fires when a new access log entry has been added for the player item.
/// \param player Player that the access log entry was created by.
///
/// \param metadata Contains information about the access log entry.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didReceiveAccessLogMetadata:(JWAccessLogMetadata * _Nonnull)metadata;
@end

@class NSURL;
@class JWAdOffset;
enum JWAdType : NSInteger;

/// A location or point in time where one or more ads may be scheduled for delivery.
SWIFT_CLASS("_TtC11JWPlayerKit9JWAdBreak")
@interface JWAdBreak : NSObject
/// Contains the VAST ad assembled urls used by our player to retrieve ads.
/// note:
/// If you are calling this from Objective-C, use <code>tagArray</code> instead.
@property (nonatomic, readonly, copy) NSArray<NSURL *> * _Nonnull tags;
/// The offset describes the point in time at which to play the ad.
/// note:
/// Supported formats are:
/// <ul>
///   <li>
///     pre: specifies that the ad should be played before the video content.
///   </li>
///   <li>
///     post: specifies that the ad should be played after the video content.
///   </li>
///   <li>
///     seconds - ‘50’
///   </li>
///   <li>
///     fractional seconds - ‘50.5’
///   </li>
///   <li>
///     percentage of the entire video - ‘50%’
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) JWAdOffset * _Nonnull offset;
/// The ad type defines where and how the ad will be displayed.
/// note:
/// Currently only <code>.linear</code> is supported.
@property (nonatomic, readonly) enum JWAdType type;
/// This init is internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Overridden to provide more accurate value comparisons.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The builder for JWAdBreak.
SWIFT_CLASS("_TtC11JWPlayerKit16JWAdBreakBuilder")
@interface JWAdBreakBuilder : NSObject
/// Builds an ad break based off the settings provided.
/// <ul>
///   <li>
///     throws An error if the ad break is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWAdBreak</code> object.
///   </li>
/// </ul>
- (JWAdBreak * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets an array of ad urls.
/// \param tags An array of VAST ad urls.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdBreakBuilder * _Nonnull)tags:(NSArray<NSURL *> * _Nonnull)tags;
/// Sets the offset of the ad break. The default value is <code>.pre</code>.
/// \param offset The offset of the ad break.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdBreakBuilder * _Nonnull)offset:(JWAdOffset * _Nonnull)offset;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Constants representing supported ad clients.
typedef SWIFT_ENUM(NSInteger, JWAdClient, open) {
/// JW Player VAST plug-in
  JWAdClientJWPlayer = 0,
/// Google IMA
  JWAdClientGoogleIMA = 1,
/// Google IMA DAI
  JWAdClientGoogleIMADAI = 2,
/// An unrecognized ad client.
  JWAdClientUnknown = 3,
};

enum JWAdCompanionType : NSInteger;

/// An interface to expose information on an ad companion.
SWIFT_CLASS("_TtC11JWPlayerKit13JWAdCompanion")
@interface JWAdCompanion : NSObject
/// URL to go to when the ad is clicked.
@property (nonatomic, readonly, copy) NSURL * _Nullable clickUrl;
/// The dimensions of the companion.
@property (nonatomic, readonly) CGSize size;
/// The URL to the static/iframe resource, or the raw HTML content.
@property (nonatomic, readonly, copy) NSURL * _Nullable resource;
/// The type of creative
@property (nonatomic, readonly) enum JWAdCompanionType type;
/// An array of included creativeview event tracking pixels.
/// note:
/// If you are calling this from Swift, use the <code>creativeView</code> property instead.
@property (nonatomic, readonly, strong) NSArray * _Nullable creativeViewArray;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Constants representing the type of creative in an ad companion.
typedef SWIFT_ENUM(NSInteger, JWAdCompanionType, open) {
/// An iFrame
  JWAdCompanionTypeIframe = 0,
/// A static image
  JWAdCompanionTypeStatic = 1,
/// An HTML page or resource
  JWAdCompanionTypeHtml = 2,
};

@class JWAdEvent;

/// A delegate which will receive ad events.
SWIFT_PROTOCOL("_TtP11JWPlayerKit12JWAdDelegate_")
@protocol JWAdDelegate
/// Reports when an event is emitted by the player.
/// \param player The player playing the ad.
///
/// \param event A description of the ad, including the type of event being reported.
///
- (void)jwplayer:(id _Nonnull)player adEvent:(JWAdEvent * _Nonnull)event;
@end

enum JWAdEventType : NSInteger;
enum JWAdEventKey : NSInteger;

/// A description of an ad event.
SWIFT_CLASS("_TtC11JWPlayerKit9JWAdEvent")
@interface JWAdEvent : NSObject
/// The type of event being reported.
@property (nonatomic, readonly) enum JWAdEventType type;
/// The ad client displaying the ad.
@property (nonatomic, readonly) enum JWAdClient client;
- (id _Nullable)objectForKeyedSubscript:(enum JWAdEventKey)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Keys into the JWAdEvent payload.
typedef SWIFT_ENUM(NSInteger, JWAdEventKey, open) {
/// The position of the ad within the content.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyAdPosition = 0,
/// Ad system referenced inside of the VAST XML.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyAdSystem = 1,
/// The title of the ad.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyAdTitle = 2,
/// The url which will be visited when the ad is tapped.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyClickThroughUrl = 3,
/// Descriptions of the ad’s companions.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as an array of <code>JWAdCompanion</code>.
  JWAdEventKeyCompanions = 4,
/// The ad identifier.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyCreativeAdId = 5,
/// The creative id.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyCreativeId = 6,
/// The type of ad being displayed for the ad.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyCreativetype = 7,
/// A descriptive name of the ad.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyId = 8,
/// A verbose description of Google IMA properties.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>Dictionary</code>.
  JWAdEventKeyIma = 9,
/// A description of the ad impression.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>JWAdImpression</code>.
  JWAdEventKeyImpression = 10,
/// A value indicating whether the ad is <code>linear</code> or <code>nonlinear</code>. Nonlinear ads are not supported in the SDK.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyLinear = 11,
/// Object containing the metadata from the ad. The values contained within the object will vary based on the ad.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>Dictionary</code>.
  JWAdEventKeyMetadata = 12,
/// The new state of the ad.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyNewState = 13,
/// Tne old state of the ad prior to the current event.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyOldState = 14,
/// The reason for pausing.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>JWPauseReason</code>.
  JWAdEventKeyPauseReason = 15,
/// Value sent in a bid request that identifies the location of a player.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as an <code>Int</code>.
  JWAdEventKeyPlacement = 16,
/// The reason for playing.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>JWPlayReason</code>.
  JWAdEventKeyPlayReason = 17,
/// The pod count total.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as an <code>Int</code>.
  JWAdEventKeyPodCount = 18,
/// The current playback position in the ad creative in seconds.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>Double</code>.
  JWAdEventKeyPosition = 19,
/// An array representing the schedule of the ads within the content, and information on each.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as an array of <code>JWAdBreak</code>.
  JWAdEventKeySchedule = 20,
/// The index of the current ad in the ad pod.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as an <code>Int</code>.
  JWAdEventKeySequence = 21,
/// The number of seconds before the user is allowed to skip the ad.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>Double</code>.
  JWAdEventKeySkipOffset = 22,
/// The URL of the ad tag.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>URL</code>.
  JWAdEventKeyTag = 23,
/// The type of creative being displayed.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as a <code>String</code>.
  JWAdEventKeyType = 24,
/// Whether or not the player is currently visible. A <code>0</code> indicates it is 50% or less viewable, while a <code>1</code> indicates it is 50% or greater viewable.
/// note:
/// When used in conjunction with <code>JWAdEvent</code>, the value is returned as an <code>Int</code>.
  JWAdEventKeyViewable = 25,
};

/// Constants denoting a type of ad event.
typedef SWIFT_ENUM(NSInteger, JWAdEventType, open) {
/// This event is reported when the ad break has come to an end.
  JWAdEventTypeAdBreakEnd = 0,
/// This event is reported when the ad break has begun.
  JWAdEventTypeAdBreakStart = 1,
/// This event is reported when the user taps the ad.
  JWAdEventTypeClicked = 2,
/// This event is reported when the ad is done playing.
  JWAdEventTypeComplete = 3,
/// This event is used to report the ad impression, supplying additional detailed information about the ad.
  JWAdEventTypeImpression = 4,
/// This event reports meta data information associated with the ad.
  JWAdEventTypeMeta = 5,
/// The event is reported when the ad pauses.
  JWAdEventTypePause = 6,
/// This event is reported when the ad begins playing, even in the middle of the stream after it was paused.
  JWAdEventTypePlay = 7,
/// The event reports data about the ad request, when the ad is about to be loaded.
  JWAdEventTypeRequest = 8,
/// This event reports the schedule of ads across the currently playing content.
  JWAdEventTypeSchedule = 9,
/// This event is reported when the user skips the ad.
  JWAdEventTypeSkipped = 10,
/// This event is reported when the ad begins.
  JWAdEventTypeStarted = 11,
/// This event relays information about ad companions.
  JWAdEventTypeCompanion = 12,
};

enum JWAdPosition : NSInteger;

/// Ad impression information for an ad.
SWIFT_CLASS("_TtC11JWPlayerKit14JWAdImpression")
@interface JWAdImpression : NSObject
/// Position of the ad within the video.
@property (nonatomic, readonly) enum JWAdPosition position;
/// AdSystem referenced inside of the VAST XML.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified system;
/// AdTitle referenced inside of the VAST XML.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified title;
/// URL which will be opened when the ad is clicked.
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughURL;
/// The type of ad, linear or non-linear.
@property (nonatomic, readonly) enum JWAdType type;
/// The ad identifier within the VAST XML.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified adId;
/// The creative ad identifier within the VAST XML.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified creativeAdId;
/// The creative ad identifier within the VAST XML.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified creativeId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A structure describing settings for the ad interface.
SWIFT_CLASS("_TtC11JWPlayerKit18JWAdInterfaceStyle")
@interface JWAdInterfaceStyle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The builder for the JWAdInterfaceStyle.
/// note:
/// Currently, this styling only applies to JW Player’s VAST ad client.
SWIFT_CLASS("_TtC11JWPlayerKit25JWAdInterfaceStyleBuilder")
@interface JWAdInterfaceStyleBuilder : NSObject
/// Builds a <code>JWAdInterfaceStyle</code> structure for use in ads.
/// <ul>
///   <li>
///     throws An error if the style is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWAdInterfaceStyle</code> object.
///   </li>
/// </ul>
- (JWAdInterfaceStyle * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// The text to display in the countdown until the ad ends. The default value is “This ad will end in xx”.
/// note:
/// The string provided is displayed as a literal, and is not looked up in a localized string table.
/// \param text The desired text. Optionally, insert ‘xx’ where the countdown should be displayed.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdInterfaceStyleBuilder * _Nonnull)countdownText:(NSString * _Nonnull)text;
/// The text to display while skipping is disabled. The default value is “Skip ad in xx”.
/// note:
/// The string provided is displayed as a literal, and is not looked up in a localized string table.
/// \param text The desired text. Optionally, insert ‘xx’ where the countdown to skipping enabled should be displayed.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdInterfaceStyleBuilder * _Nonnull)skipDelayText:(NSString * _Nonnull)text;
/// The text to display on the skip button when the user can tap it to skip the ad. The default value is “Skip Ad”.
/// note:
/// The string provided is displayed as a literal, and is not looked up in a localized string table.
/// \param text The desired text.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdInterfaceStyleBuilder * _Nonnull)skipText:(NSString * _Nonnull)text;
/// The number of seconds to delay the ability to skip the ad. The default value is nil (skip button won’t be shown).
/// \param seconds The number of seconds to delay the ability to skip.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdInterfaceStyleBuilder * _Nonnull)skipDelay:(NSTimeInterval)seconds;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An offset into the content where an ad plays.
SWIFT_CLASS("_TtC11JWPlayerKit10JWAdOffset")
@interface JWAdOffset : NSObject
/// Creates a preroll offset.
///
/// returns:
/// A new instance of JWAdOffset.
+ (JWAdOffset * _Nonnull)preroll SWIFT_WARN_UNUSED_RESULT;
/// Creates a postroll offset.
///
/// returns:
/// A new instance of JWAdOffset.
+ (JWAdOffset * _Nonnull)postroll SWIFT_WARN_UNUSED_RESULT;
/// Creates a midroll offset.
/// \param seconds The number of seconds into the video where the ad occurs. If this is less than or equal to 0, it will return a preroll.
///
///
/// returns:
/// A new instance of JWAdOffset.
+ (JWAdOffset * _Nonnull)midrollWithSeconds:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// Creates a midroll offset.
/// \param percent A percentage (0-100) into the content’s duration where the ad occurs. Any value 0 or below is considered a preroll, and if it is 100 or above, it is considered a postroll.
///
///
/// returns:
/// A new instance of JWAdOffset.
+ (JWAdOffset * _Nonnull)midrollWithPercent:(NSInteger)percent SWIFT_WARN_UNUSED_RESULT;
/// Creates a JWAdOffset from a supplied string.
/// This method requires the supplied string be in one of the a few specific formats.
/// <ul>
///   <li>
///     “pre”: Creates a preroll.
///   </li>
///   <li>
///     “mid”: Creates a midroll 50% into the content.
///   </li>
///   <li>
///     “post”: Creates a postroll.
///   </li>
///   <li>
///     “[FLT]”: A midroll at a number of seconds into the content. e.g. “3.5”
///   </li>
///   <li>
///     “[INT]%”: A midroll at a percentage of the way into the content. Valid values range from 0-100. e.g. “50%”
///   </li>
///   <li>
///     “[Hours]:[Minutes]:[Seconds]”: A specified time in the content at which to have a midroll. e.g. “3:45”, “02:23:06”, etc.
///   </li>
/// </ul>
/// \param val The string to parse for an offset value.
///
///
/// returns:
/// A new instance of JWAdOffset, or nil if the string is an invalid value.
+ (JWAdOffset * _Nullable)fromString:(NSString * _Nonnull)val SWIFT_WARN_UNUSED_RESULT;
/// Returns a string describing the offset’s value.
///
/// returns:
/// The offset’s value as a string.
- (NSString * _Nonnull)asString SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Constants denoting an ad’s position in the content.
typedef SWIFT_ENUM(NSInteger, JWAdPosition, open) {
/// The ad plays before the content appears.
  JWAdPositionPre = 0,
/// The ad plays after the content has completed.
  JWAdPositionPost = 1,
/// The ad interrupts the content, and plays itself.
  JWAdPositionMid = 2,
/// The ad position is unknown.
  JWAdPositionUnknown = 3,
};


/// Defines playback rules for the scheduled ads.
SWIFT_CLASS("_TtC11JWPlayerKit9JWAdRules")
@interface JWAdRules : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum JWAdShownOnSeek : NSInteger;

/// The builder for JWAdRules.
SWIFT_CLASS("_TtC11JWPlayerKit16JWAdRulesBuilder")
@interface JWAdRulesBuilder : NSObject
/// Builds a <code>JWAdRules</code> structure for use in ads.
/// <ul>
///   <li>
///     throws An error if the rules are not setup properly.
///   </li>
///   <li>
///     returns A <code>JWAdRules</code> object.
///   </li>
/// </ul>
- (JWAdRules * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the advertising rules relevant to the JWPlayer advertising client.
/// \param startOn The first playlist item that will allow ad playback, index starting at 1.
///
/// \param frequency Play ads only on every X playlist item. i.e. frequency 3 means only play ads every third playlist item. Use 0 to only play ads on the first playlist item.
///
/// \param timeBetweenAds The minimum amount of time (in seconds) that needs to pass before the viewer is served another ad.
///
/// \param startOnSeek Indicates which ad (if any) should play if playback starts by seeking.
///
///
/// returns:
/// The builder.
- (JWAdRulesBuilder * _Nonnull)jwRulesWithStartOn:(NSUInteger)startOn frequency:(NSUInteger)frequency timeBetweenAds:(NSUInteger)timeBetweenAds startOnSeek:(enum JWAdShownOnSeek)startOnSeek;
/// Sets the advertising rules relevant to the IMA advertising client.
/// \param startOn The first playlist item that will allow ad playback, index starting at 1.
///
/// \param frequency Play ads only on every X playlist item. i.e. frequency 3 means only play ads every third playlist item. Use 0 to only play ads on the first playlist item.
///
///
/// returns:
/// The builder.
- (JWAdRulesBuilder * _Nonnull)imaRulesWithStartOn:(NSUInteger)startOn frequency:(NSUInteger)frequency;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class allows setting specific ad behavior for the JWPlayer ad client.
SWIFT_CLASS("_TtC11JWPlayerKit12JWAdSettings")
@interface JWAdSettings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The builder for <code>JWAdSettings</code>, object used to set behavior for JWPlayer ads.
SWIFT_CLASS("_TtC11JWPlayerKit19JWAdSettingsBuilder")
@interface JWAdSettingsBuilder : NSObject
/// Builds a <code>JWAdSettings</code> structure for configure .
/// <ul>
///   <li>
///     returns A <code>JWAdSettings</code> object.
///   </li>
/// </ul>
- (JWAdSettings * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
/// Sets background playback for JWPlayer ads.
/// \param isAllowed If background playback is allowed.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdSettingsBuilder * _Nonnull)allowsBackgroundPlayback:(BOOL)isAllowed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The different options for showing an ad when the first playback is caused by a seek.
typedef SWIFT_ENUM(NSInteger, JWAdShownOnSeek, open) {
/// Do not show ad.
  JWAdShownOnSeekNone = 0,
/// Play preroll ad before the content’s initial playback.
  JWAdShownOnSeekPre = 1,
};


/// This serves as the base class for configurations affecting advertisement analytics.
SWIFT_CLASS("_TtC11JWPlayerKit17JWAdTrackerConfig")
@interface JWAdTrackerConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Constants denoting an ad’s type
typedef SWIFT_ENUM(NSInteger, JWAdType, open) {
/// Ad interrupts content either before, during, or after it has played.
  JWAdTypeLinear = 0,
/// Ad type has not been set.
  JWAdTypeUnknown = 1,
};

@class JWAdvertisingConfig;

/// Used to build a <code>JWAdvertisingConfig</code> object to play ads using the JWPlayer client.
SWIFT_CLASS("_TtC11JWPlayerKit29JWAdsAdvertisingConfigBuilder")
@interface JWAdsAdvertisingConfigBuilder : NSObject
/// Builds an advertising config based off the settings provided.
/// <ul>
///   <li>
///     throws An error if the config is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWAdvertisingConfig</code> object.
///   </li>
/// </ul>
- (JWAdvertisingConfig * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets a VMAP URL.
/// \param vmapURL Either a local or remote URL of the vmap file.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdsAdvertisingConfigBuilder * _Nonnull)vmapURL:(NSURL * _Nonnull)vmapURL;
/// Sets an array of <code>JWAdBreak</code> objects that provide information about ad breaks.
/// note:
/// If an ad tag is also set using <code>tag()</code>, calling <code>build()</code> will throw an exception.
/// \param schedule An array of <code>JWAdBreak</code> objects that provide information about ad breaks.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdsAdvertisingConfigBuilder * _Nonnull)schedule:(NSArray<JWAdBreak *> * _Nonnull)schedule;
/// Sets the URL of the VAST tag.
/// note:
/// Can also specify the VAST VMAP file to use for ad breaks.
/// note:
/// If an ad schedule is also set using <code>schedule()</code>, calling <code>build()</code> will throw an exception.
/// \param tag The URL of the VAST tag to display.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdsAdvertisingConfigBuilder * _Nonnull)tag:(NSURL * _Nonnull)tag;
/// Sets the rules for how often a user sees ads while watching the video content.
/// \param adRules Defines playback rules for the scheduled ads.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdsAdvertisingConfigBuilder * _Nonnull)adRules:(JWAdRules * _Nonnull)adRules;
/// Sets whether or not the player should open the default browser after the user clicks an ad. The default value is <code>true</code>.
/// note:
/// Applicable to JW ad client only.
/// \param openBrowserOnAdClick Whether or not the player should open the default browser after the user clicks an ad.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdsAdvertisingConfigBuilder * _Nonnull)openBrowserOnAdClick:(BOOL)openBrowserOnAdClick;
/// Sets the JWPlayer client ad settings.
/// \param settings A <code>JWAdSettings</code> object.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWAdsAdvertisingConfigBuilder * _Nonnull)adSettings:(JWAdSettings * _Nonnull)settings;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Encompasses all configuration options for ad plugins.
SWIFT_CLASS("_TtC11JWPlayerKit19JWAdvertisingConfig")
@interface JWAdvertisingConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum JWAirPlayStatus : NSInteger;

/// Reports AirPlay events
SWIFT_PROTOCOL("_TtP11JWPlayerKit17JWAirPlayDelegate_")
@protocol JWAirPlayDelegate
/// Reports when the player’s AirPlay connection status changes.
/// \param player The player affected by the AirPlay connection status change.
///
/// \param status The status of the player’s AirPlay connection.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player airPlayStatusChanged:(enum JWAirPlayStatus)status;
@end

/// The status of the player’s AirPlay connection
typedef SWIFT_ENUM(NSInteger, JWAirPlayStatus, open) {
/// The player is connected to an AirPlay device.
  JWAirPlayStatusConnected = 0,
/// The player isn’t connected to any AirPlay devices.
  JWAirPlayStatusDisconnected = 1,
};

/// Reasons why the player buffers.
typedef SWIFT_ENUM(NSInteger, JWBufferReason, open) {
/// The player is buffering expectedly as it tries to play after an action (e.g. scrubbing or a play attempt).
  JWBufferReasonLoading = 0,
/// The player is buffering unexpectedly as it waits to continue playing.
  JWBufferReasonStalled = 1,
};

/// Constants describing the text alignment of a caption within the box containing it.
typedef SWIFT_ENUM(NSInteger, JWCaptionAlignment, open) {
/// The caption’s left side is flush with the left side of the caption box.
  JWCaptionAlignmentLeft = 0,
/// The caption is centered within the caption box.
  JWCaptionAlignmentCenter = 1,
/// The caption’s right side is flush with the right side of the caption box.
  JWCaptionAlignmentRight = 2,
};

/// Constants defining the border style of the caption.
typedef SWIFT_ENUM(NSInteger, JWCaptionEdgeStyle, open) {
/// No style defined.
  JWCaptionEdgeStyleUndefined = 1,
/// No border.
  JWCaptionEdgeStyleNone = 2,
/// Drop shadow for the border.
  JWCaptionEdgeStyleDropshadow = 3,
/// Border style is rendered as raised.
  JWCaptionEdgeStyleRaised = 4,
/// Border style is rendered as depressed.
  JWCaptionEdgeStyleDepressed = 5,
/// Border style is rendered as uniform.
  JWCaptionEdgeStyleUniform = 6,
};


/// An object describing the position, size, and behavior of a caption on the screen. In order to instantiate an instance of this class, use <code>JWCaptionPositionBuilder</code>.
SWIFT_CLASS("_TtC11JWPlayerKit17JWCaptionPosition")
@interface JWCaptionPosition : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The builder for creating a <code>JWCaptionPosition</code> and verifying its properties.
SWIFT_CLASS("_TtC11JWPlayerKit24JWCaptionPositionBuilder")
@interface JWCaptionPositionBuilder : NSObject
- (JWCaptionPosition * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Specifies the width of caption box as a percentage in the range [0…100]. This is a percentage based on the width of the video player. If unspecified, the caption box will automatically resize to fit the caption text.
/// note:
/// If you specify a value outside of the range [0…100], <code>build()</code> will throw an error.
/// \param percentage The desired width of the caption box specified as a percentage in the range [0…100].
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionPositionBuilder * _Nonnull)widthWithPercentage:(NSInteger)percentage;
/// Specifies the alignment of the caption text within the caption box. If unspecified, the default value is <code>.center</code>.
/// \param alignment The desired text alignment of the caption within its caption box.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionPositionBuilder * _Nonnull)alignment:(enum JWCaptionAlignment)alignment;
/// Specifies the horizontal position of caption box as a percentage in the range [0…100]. This is a percentage based on the width of the video player. If unspecified, the default value is <code>50</code>.
/// note:
/// If you specify a value outside of the range [0…100], <code>build()</code> will throw an error.
/// note:
/// This value is not observed if <code>width</code> has not been specified.
/// \param percentage The desired position of the caption box specified as a percentage in the range [0…100].
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionPositionBuilder * _Nonnull)horizontalPositionWithPercentage:(NSInteger)percentage;
/// Specifies the vertical position of caption box as a percentage in the range [0…100]. This is a percentage based on the height of the video player.
/// note:
/// Do not call this method if you are also calling <code>verticalPosition(lineIndex:)</code>, or <code>build()</code> will throw an error.
/// note:
/// If you specify a value outside of the range [0…100], <code>build()</code> will throw an error.
/// \param percentage The desired position of the caption box specified as a percentage in the range [0…100].
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionPositionBuilder * _Nonnull)verticalPositionWithPercentage:(NSInteger)percentage;
/// Specifies the vertical position of caption box as a line index.
/// If this is expressed as a negative number it counts the lines starting at the bottom edge of the video player. If it is a positive number it counts the lines starting from the top edge of the player. The height of a line is dependent on the font being used for the caption.
/// note:
/// Do not call this method if you are also calling <code>verticalPosition(percentage:)</code>, or <code>build()</code> will throw an error.
/// \param lineIndex The desired position of the caption box specified as a line index.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionPositionBuilder * _Nonnull)verticalPositionWithLineIndex:(NSInteger)lineIndex;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;
@class UIFont;

/// Configuration object used to customize the captions.
/// Styles specified using this structure will only be applied if the user’s accessibility settings allow it, and only for SRT and WebVTT captions. EIA-608 captions always default to the user’s accessibility settings.
SWIFT_CLASS("_TtC11JWPlayerKit14JWCaptionStyle")
@interface JWCaptionStyle : NSObject
/// Overrides the default font color of the captions, including its opacity.
/// note:
/// Styles specified using this property will only be applied if the user’s accessibility settings allow it, and only for SRT and WebVTT captions. EIA-608 captions always default to the user’s accessibility settings.
@property (nonatomic, readonly, strong) UIColor * _Nullable fontColor;
/// Changes the background color and the opacity of the overall window the captions reside in.
/// note:
/// Styles specified using this property will only be applied if the user’s accessibility settings allow it, and only for SRT and WebVTT captions. EIA-608 captions always default to the user’s accessibility settings.
@property (nonatomic, readonly, strong) UIColor * _Nullable backgroundColor;
/// Changes the highlight color and highlight opacity of the text.
/// note:
/// Styles specified using this property will only be applied if the user’s accessibility settings allow it, and only for SRT and WebVTT captions. EIA-608 captions always default to the user’s accessibility settings.
@property (nonatomic, readonly, strong) UIColor * _Nullable highlightColor;
/// Overrides the default font style and font size.
/// note:
/// Styles specified using this property will only be applied if the user’s accessibility settings allow it, and only for SRT and WebVTT captions. EIA-608 captions always default to the user’s accessibility settings.
@property (nonatomic, readonly, strong) UIFont * _Nullable font;
/// The edge style is an option to put emphasis around text. The available options are: none, dropshadow, raised, depressed, and uniform.
/// note:
/// Styles specified using this property will only be applied if the user’s accessibility settings allow it, and only for SRT and WebVTT captions. EIA-608 captions always default to the user’s accessibility settings.
@property (nonatomic, readonly) enum JWCaptionEdgeStyle edgeStyle;
/// The default position of captions displayed in the player.
/// This position is used if no position is specified by the caption itself, and this is only used with side-loaded captions.
/// Because SRT captions contain no positional data, SRT captions will always be displayed using what is described by this property. For WebVTT captions, if no positional data is specified within the caption, the default position of the caption will be equal to what is described by this property.
@property (nonatomic, readonly, strong) JWCaptionPosition * _Nullable position;
/// This init is internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The builder for JWCaptionStyle.
SWIFT_CLASS("_TtC11JWPlayerKit21JWCaptionStyleBuilder")
@interface JWCaptionStyleBuilder : NSObject
/// Builds a <code>JWCaptionStyle</code> structure describing how captions should look if accessibility settings are not defined by the user.
/// <ul>
///   <li>
///     throws An error if the style is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWCaptionStyle</code> object.
///   </li>
/// </ul>
- (JWCaptionStyle * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the font color of the captions.
/// \param fontColor The color for the captions, including its opacity.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionStyleBuilder * _Nonnull)fontColor:(UIColor * _Nonnull)fontColor;
/// Sets the background color and the opacity of the overall window the captions reside in
/// \param backgroundColor The color to set on the background of the captions.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionStyleBuilder * _Nonnull)backgroundColor:(UIColor * _Nonnull)backgroundColor;
/// Sets the highlight color and highlight opacity of the text.
/// \param highlightColor The color to be set on the highlight of the text.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionStyleBuilder * _Nonnull)highlightColor:(UIColor * _Nonnull)highlightColor;
/// Sets the font style and font size.
/// \param font The font to be set on captions.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionStyleBuilder * _Nonnull)font:(UIFont * _Nonnull)font;
/// Sets the edge style emphasis around text. The available options are: none, dropshadow, raised, depressed, and uniform.
/// \param edgeStyle The style to apply to the captions.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionStyleBuilder * _Nonnull)edgeStyle:(enum JWCaptionEdgeStyle)edgeStyle;
/// Sets the default position of side-loaded captions displayed in the player.
/// This position is used if no position is specified by the caption itself, and this is only used with side-loaded captions.
/// Because SRT captions contain no positional data, SRT captions will always be displayed using what is described by this property. For WebVTT captions, if no positional data is specified within the caption, the default position of the caption will be equal to what is described by this property.
/// \param position The desired default position of the rendered captions.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionStyleBuilder * _Nonnull)position:(JWCaptionPosition * _Nonnull)position;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Provides information about captions or thumbnails. Supports TTML (DFXP), SRT, and WebVTT formats.
SWIFT_CLASS("_TtC11JWPlayerKit12JWMediaTrack")
@interface JWMediaTrack : NSObject
/// Path to the caption or thumbnail track file.
@property (nonatomic, readonly, copy) NSURL * _Null_unspecified file;
/// Label to be shown in the player in the captions popup.
/// note:
/// Only for captions. Not shown if only one caption track provided.
@property (nonatomic, readonly, copy) NSString * _Nullable label;
/// If set to <code>true</code>, the player shows this caption track upon launch. The default value is <code>false</code>.
/// note:
/// Only for captions.
@property (nonatomic, readonly) BOOL defaultTrack;
/// Init is internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Overridden to more accurately compare tracks.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// Provides information about a caption track.
SWIFT_CLASS("_TtC11JWPlayerKit14JWCaptionTrack")
@interface JWCaptionTrack : JWMediaTrack
/// The locale specified for this caption track. This value is <code>nil</code> if unknown.
@property (nonatomic, readonly, copy) NSString * _Nullable locale;
@end


/// The builder for creating a JWMediaTrack used for captions.
SWIFT_CLASS("_TtC11JWPlayerKit21JWCaptionTrackBuilder")
@interface JWCaptionTrackBuilder : NSObject
/// Builds a media track based off the settings provided.
/// <ul>
///   <li>
///     throws An error if the track is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWMediaTrack</code> object.
///   </li>
/// </ul>
- (JWCaptionTrack * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the path to the caption track file.
/// note:
/// Accepts WebVTT, SRT, and TTML format, though JW Player strongly suggests using WEBVTT if possible.
/// \param file Path to the caption track file.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionTrackBuilder * _Nonnull)file:(NSURL * _Nonnull)file;
/// Sets the label to be shown in the player in the captions pop-up.
/// note:
/// Not shown if only 1 caption track is provided.
/// note:
/// The string provided is displayed as a literal, and is not looked up in a localized string table.
/// \param label The label to be shown in the player in the captions pop-up.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionTrackBuilder * _Nonnull)label:(NSString * _Nonnull)label;
/// Sets whether or not the player shows this caption track upon launch.
/// note:
/// The default value is <code>false</code>.
/// \param defaultTrack Whether or not the player shows this caption track upon launch.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionTrackBuilder * _Nonnull)defaultTrack:(BOOL)defaultTrack;
/// Sets the locale for the caption track.
/// \param locale The ISO 639-1 code for the language in the caption track.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWCaptionTrackBuilder * _Nonnull)locale:(NSString * _Nonnull)locale;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol JWCastDelegate;
@class JWCastingDevice;

/// Controller that enables casting using a <code>JWPlayer</code> instance.
SWIFT_CLASS("_TtC11JWPlayerKit16JWCastController")
@interface JWCastController : NSObject
/// Delegate that will receive casting-related callbacks.
@property (nonatomic, weak) id <JWCastDelegate> _Nullable delegate;
/// The casting device that is currently connected.
@property (nonatomic, readonly, strong) JWCastingDevice * _Nullable connectedDevice;
/// List of casting devices that are currently online.
/// note:
/// <code>startDiscovery</code> must be called in order to start updating the available devices.
@property (nonatomic, readonly, copy) NSArray<JWCastingDevice *> * _Nonnull availableDevices;
/// This should only be used for unit tests.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initialize the <code>JWCastController</code> with a player. If the <code>Google Cast SDK</code> is not linked, it will return <code>nil</code>.
/// \param player <code>JWPlayer</code> object currently in use.
///
- (nullable instancetype)initWithPlayer:(id <JWPlayer> _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
/// Starts the discovery process. After calling this method, the <code>availableDevices</code> array will be updated with any
/// devices that are discovered.
/// note:
/// Before calling <code>startDiscovery()</code>, make sure you have initialized the <code>GCKCastContext</code>, typically in your <code>AppDelegate</code>.
/// <code>GCKCastContext</code> is a global singleton object that is part of the Cast framework. It coordinates all of the framework’s activities. For more information, see [Initialize the Cast context.] (https://developers.google.com/cast/docs/ios_sender/integrate#initialize_the_cast_context)
- (void)startDiscovery;
/// Stops the discovery process. After calling this method, device discovery will stop, and the <code>availableDevices</code> array not be updated.
- (void)stopDiscovery;
/// Connects to the casting device.
/// note:
/// To get an array of all available devices, used <code>availableDevices</code>.
/// \param device The casting device to connect to.
///
- (void)connectToDevice:(JWCastingDevice * _Nonnull)device;
/// Disconnects from the currently connected casting device.
- (void)disconnect;
/// Casts the current item that is being used by the <code>JWPlayer</code> instance.
/// note:
/// You must be connected to a casting device in order to cast.
- (void)cast;
/// Stops the casting and resumes the <code>JWPlayer</code> instance.
/// note:
/// Calling this method does not disconnect from the casting device.
- (void)stopCasting;
@end



/// Defines methods that a delegate of a <code>JWCastController</code> object can implement to receive casting callbacks.
SWIFT_PROTOCOL("_TtP11JWPlayerKit14JWCastDelegate_")
@protocol JWCastDelegate
/// Called whenever a new casting device comes online.
- (void)castController:(JWCastController * _Nonnull)controller devicesAvailable:(NSArray<JWCastingDevice *> * _Nonnull)devices;
/// Called when a successful connection to a casting device is made.
/// \param device The casting device to which the <code>JWCastController</code> is connected to.
///
- (void)castController:(JWCastController * _Nonnull)controller connectedTo:(JWCastingDevice * _Nonnull)device;
/// Called when the casting device disconnects.
/// \param error The potential error associated with the disconnection. Value will be nil if disconnection was purposeful.
///
- (void)castController:(JWCastController * _Nonnull)controller disconnectedWithError:(NSError * _Nullable)error;
/// Called when the connected casting device is temporarily disconnected. Video resumes on the mobile device until connection resumes.
- (void)castController:(JWCastController * _Nonnull)controller connectionSuspendedWithDevice:(JWCastingDevice * _Nonnull)device;
/// Called after connection is reestablished following a temporary disconnection. Video resumes on the casting device.
- (void)castController:(JWCastController * _Nonnull)controller connectionRecoveredWithDevice:(JWCastingDevice * _Nonnull)device;
/// Called when an attempt to connect to a casting device is unsuccessful.
/// \param error The error associated with the connection failure.
///
- (void)castController:(JWCastController * _Nonnull)controller connectionFailedWithError:(NSError * _Nonnull)error;
/// Called when casting session begins.
- (void)castController:(JWCastController * _Nonnull)controller castingBeganWithDevice:(JWCastingDevice * _Nonnull)device;
/// Called when an attempt to cast to a casting device is unsuccessful.
/// \param error The error associated with the casting failure.
///
- (void)castController:(JWCastController * _Nonnull)controller castingFailedWithError:(NSError * _Nonnull)error;
/// Called when a casting session ends.
/// note:
/// Application might still be connected to the casting device.
/// \param error The potential error associated with the casting session ending. Value will be nil if casting ended intentionally.
///
- (void)castController:(JWCastController * _Nonnull)controller castingEndedWithError:(NSError * _Nullable)error;
@end


/// Encapsulates a casting device.
SWIFT_CLASS("_TtC11JWPlayerKit15JWCastingDevice")
@interface JWCastingDevice : NSObject
/// The casting device’s friendly name, i.e. “Dining Room”.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// A unique identifier for the casting device.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Provides information about a chapter track.
SWIFT_CLASS("_TtC11JWPlayerKit14JWChapterTrack")
@interface JWChapterTrack : JWMediaTrack
/// A list of chapter identifiers denoting what chapters are skippable.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull skippableChapters;
/// A number of seconds to display the skip button when viewing a skippable chapter.
@property (nonatomic, readonly) NSTimeInterval skipButtonDuration;
@end


/// The builder for creating a JWMediaTrack used for chapters.
SWIFT_CLASS("_TtC11JWPlayerKit21JWChapterTrackBuilder")
@interface JWChapterTrackBuilder : NSObject
/// Builds a media track based off the settings provided.
/// <ul>
///   <li>
///     throws An error if the track is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWMediaTrack</code> object.
///   </li>
/// </ul>
- (JWChapterTrack * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the path to the thumbnail track file.
/// note:
/// Files must be in WebVTT format.
/// \param file Path to the chapter track file.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWChapterTrackBuilder * _Nonnull)file:(NSURL * _Nonnull)file;
/// Designates a list of chapters which are skippable.
/// note:
/// Chapter ids should be unique.
/// \param ids An array of chapter identifiers as specified in the WebVTT file.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWChapterTrackBuilder * _Nonnull)skippableChaptersWithIds:(NSArray<NSString *> * _Nonnull)ids SWIFT_AVAILABILITY(ios,unavailable);
/// Sets the number of seconds a skip button is displayed for skippable chapters.
/// note:
/// If a chapter duration is shorter than the life of the button, the button will not be displayed past the end of the chapter.
/// \param seconds The number of seconds a skip button will stay on the screen during the chapter.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWChapterTrackBuilder * _Nonnull)skipButtonDurationWithSeconds:(NSTimeInterval)seconds SWIFT_AVAILABILITY(ios,unavailable);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;

/// A companion ad slot.
/// This will be used to serve ad accompanying info into your application.
/// The SDK will use the view to render the content.
SWIFT_CLASS("_TtC11JWPlayerKit17JWCompanionAdSlot") SWIFT_AVAILABILITY(tvos,unavailable)
@interface JWCompanionAdSlot : NSObject
/// The view the companion will be rendered in.
/// Display this view in your application before video ad starts.
@property (nonatomic, readonly, strong) UIView * _Null_unspecified view;
/// Creates a companion ad slot.
/// This will be used to serve ad accompanying info into your application.
/// The SDK will use the view to render the content.
/// \param view A UIView where the SDK will render the ad information.
///
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view OBJC_DESIGNATED_INITIALIZER;
/// Creates a companion ad slot.
/// This will be used to serve ad accompanying info into your application.
/// The SDK will use the view to render the content.
/// \param view A UIView where the SDK will render the ad information.
///
/// \param size A  size that will be used to set the pixel height and width to send to the Google DFP ad server for targeting.
///
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view size:(CGSize)size OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, JWContentKeyType, open) {
/// The content key is persistable.
  JWContentKeyTypePersistable = 0,
/// The content key is not persistable.
  JWContentKeyTypeNonpersistable = 1,
};

/// Controls on the player’s interface
typedef SWIFT_ENUM(NSInteger, JWControlType, open) {
/// Button to fast-forward
  JWControlTypeFastForwardButton = 0,
/// Button to rewind
  JWControlTypeRewindButton = 1,
/// Button to enter picture in picture mode
  JWControlTypePictureInPictureButton = 2,
/// Button to control  AirPlay
  JWControlTypeAirplayButton = 3,
/// Button to control Chromecast
  JWControlTypeChromecastButton = 4,
/// Button to go to the next item
  JWControlTypeNextButton = 5,
/// Button to go to the previous item
  JWControlTypePreviousButton = 6,
/// Button to open the settings menu
  JWControlTypeSettingsButton = 7,
/// Button to open the audio & subtitles menu
  JWControlTypeLanguagesButton = 8,
/// Button to enter and exit fullscreen mode
  JWControlTypeFullscreenButton = 9,
};

@class JWCueTime;

/// Defines a point of interest in the content.
SWIFT_CLASS("_TtC11JWPlayerKit5JWCue")
@interface JWCue : NSObject
/// When the cue begins, defined by a number of seconds after the beginning of the content.
@property (nonatomic, readonly, strong) JWCueTime * _Nonnull begin;
/// When the cue ends, defined by a number seconds after the beginning o the content.
@property (nonatomic, readonly, strong) JWCueTime * _Nullable end;
/// Text to display in the timeline.
@property (nonatomic, readonly, copy) NSString * _Nonnull text;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A JWCueTime can represent any accepted format of time in a cue.
SWIFT_CLASS("_TtC11JWPlayerKit9JWCueTime")
@interface JWCueTime : NSObject
/// Number of seconds from the beginning of the content.
@property (nonatomic, readonly) NSTimeInterval seconds;
/// The point at which the cue exists within the video, expressed as a percentage from 0 - 100.
@property (nonatomic, readonly) double percentage;
/// Initialize a JWCueTime with a TimeInterval value.
/// note:
/// This initializer will fail if value is not a positive number, and doing so will return nil.
/// \param seconds Number of seconds from the beginning of the content.
///
- (nullable instancetype)initWithSeconds:(NSTimeInterval)seconds OBJC_DESIGNATED_INITIALIZER;
/// Initialize a JWCueTime with a Double value.
/// note:
/// This initializer will fail if the parameter value is not in range of 0 - 100, and doing so will return nil.
/// \param percentage The point at which the cue exists within the media, expressed as a percentage from 0 - 100 relative to the duration of the content.
///
- (nullable instancetype)initWithPercentage:(double)percentage OBJC_DESIGNATED_INITIALIZER;
/// Initialize a JWCueTime with a String value representation of percentage.
/// note:
/// This initializer can fail, and doing so will return nil.
/// \param percentageString The point at which the cue exists within the video, expressed as a percentage from 0 - 100. With the format “{percent}%”.
///
- (nullable instancetype)initWithPercentageString:(NSString * _Nonnull)percentageString OBJC_DESIGNATED_INITIALIZER;
/// Initializes and returns a JWCueTime with the provided seconds. This is used as a shorthand initializer when type context is provided.
/// <ul>
///   <li>
///     Use example:
///   </li>
/// </ul>
/// \code
///    var cue: JWCueTime
///    //...
///    cue = .seconds(20)
///
/// \endcode\param seconds Number of seconds from the beginning of the content.
///
///
/// returns:
/// a JWCueTime instance with seconds value, nil if value is not valid.
+ (JWCueTime * _Nullable)seconds:(NSTimeInterval)seconds SWIFT_WARN_UNUSED_RESULT;
/// Initializes and returns a JWCueTime with the provided percentage in Double. This is used as a shorthand initializer when type context is provided.
/// <ul>
///   <li>
///     Percentage is a value from 0-100, relative to the duration of the media.
///   </li>
///   <li>
///     Use example:
///   </li>
/// </ul>
/// \code
///    var cue: JWCueTime
///    //...
///    cue = .percentage(25.0)
///
/// \endcode\param percentage The point at which the cue exists within the media, expressed as a percentage from 0 - 100 relative to the duration of the content.
///
///
/// returns:
/// a JWCueTime instance with percentage value. nil if value is not valid.
+ (JWCueTime * _Nullable)percentage:(double)percentage SWIFT_WARN_UNUSED_RESULT;
/// Compares two JWCueTime instances for equality. This is used through the “==” method.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;
@class NSDate;

/// This dataSource requests the necessary data to decrypt protected content following the DRM standard.
/// note:
/// Currently, only Apple FairPlay Streaming (FPS) protocol is supported.
SWIFT_PROTOCOL("_TtP11JWPlayerKit25JWDRMContentKeyDataSource_")
@protocol JWDRMContentKeyDataSource
/// Called when the JWPlayerKit needs to decrypt the current protected content and requires a <em>content identifier</em> from the application to start the decryption process.
/// \param url The url of the resource being loaded.
///
/// \param handler The handler block used to provide the JWPlayerKit with the content identifier. In the case of Apple FairPlay this is an opaque identifier for the content and is needed to obtain the <em>SPC (Server Playback Context) message</em> from the operating system.
///
- (void)contentIdentifierForURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSData * _Nullable))handler;
/// Called when the JWPlayerKit needs to decrypt the current protected content and requires an <em>application identifier</em> from the application to start the decryption process.
/// \param url The url of the resource being loaded.
///
/// \param handler The handler block used to provide the JWPlayerKit with the application identifier, <code>appIdentifier</code>, the <em>Application Certificate</em> data you receive after registering an FPS playback app.
///
- (void)appIdentifierForURL:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(NSData * _Nullable))handler;
/// Called when the JWPlayerKit needs to decrypt the current protected content and requires a <em>content key</em> from the application to start the decryption process.
/// The completion block returned contains the following information:
/// <ul>
///   <li>
///     <code>ckcData</code>: The case of Apple FairPlay, the response is the content key wrapped inside an encrypted Content Key Context (the CKC message) returned by the key server.`
///   </li>
///   <li>
///     <code>renewalDate</code>: In the case of Apple FairPlay, a date for renewal of resources that expire can be specified by passing a renewal date in the completion block.
///   </li>
///   <li>
///     <code>contentType</code>: The UTI indicating the type of data contained by the response. When specifying a <code>renewalDate</code> the content type should be specified.
///   </li>
/// </ul>
/// \param spcData The key request data that must be transmitted to the key vendor to obtain the <em>content key</em>. In the case of Apple FairPlay this is the <em>SPC (Server Playback Context) message</em> from the operating system which must be sent to the Key Server in order to obtain the <em>CKC (Content Key Context) message</em>.
///
/// \param handler The completion block used to provide the JWPlayerKit with the Server Response.`
///
- (void)contentKeyWithSPCData:(NSData * _Nonnull)spcData completionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSDate * _Nullable, NSString * _Nullable))handler;
@end

@class JWDRMContentLoader;
@class JWError;

/// A protocol for classes which are informed about events and requests dealing with content keys for protected content.
SWIFT_PROTOCOL("_TtP11JWPlayerKit22JWDRMContentKeyManager_")
@protocol JWDRMContentKeyManager
/// Requests that the content key associated with the given identifier is recorded.
/// \param contentLoader The <code>JWDRMContentLoader</code> instance.
///
/// \param contentKey The content key to be written to disk.
///
/// \param contentKeyIdentifier The identifier of the content keys to write.
///
- (void)contentLoader:(JWDRMContentLoader * _Nonnull)contentLoader writePersistableContentKey:(NSData * _Nonnull)contentKey contentKeyIdentifier:(NSString * _Nonnull)contentKeyIdentifier;
/// Reports when the persistable content key has been successfully saved.
/// If content is going to be downloaded, this event is where is should be done.
/// \param contentLoader The <code>JWDRMContentLoader</code> instance.
///
/// \param contentKeyIdentifier The identifier of the content keys that were saved.
///
- (void)contentLoader:(JWDRMContentLoader * _Nonnull)contentLoader didWritePersistableContentKey:(NSString * _Nonnull)contentKeyIdentifier;
/// Requests that the content associated with the given key is deleted.
/// \param contentLoader The <code>JWDRMContentLoader</code> instance.
///
/// \param contentKeyIdentifier The identifier of the content to be deleted.
///
- (void)contentLoader:(JWDRMContentLoader * _Nonnull)contentLoader deletePersistableContentKey:(NSString * _Nonnull)contentKeyIdentifier;
/// Returns whether or not the given content should be treated as peristable.
/// \param contentLoader The <code>JWDRMContentLoader</code> instance.
///
/// \param contentKeyIdentifier The identifier of the content being queried.
///
///
/// returns:
/// A value denoting whether the content is persistable or not.
- (enum JWContentKeyType)contentLoader:(JWDRMContentLoader * _Nonnull)contentLoader contentKeyTypeFor:(NSString * _Nonnull)contentKeyIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the given content exists on disk.
/// \param contentLoader The <code>JWDRMContentLoader</code> instance.
///
/// \param contentKeyIdentifier The identifier of the content being queried.
///
///
/// returns:
/// <code>true</code> if the content exists on the device.
- (BOOL)contentLoader:(JWDRMContentLoader * _Nonnull)contentLoader contentKeyExistsOnDisk:(NSString * _Nonnull)contentKeyIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL associated with the specified persistable content.
/// \param contentLoader The <code>JWDRMContentLoader</code> instance.
///
/// \param contentKeyIdentifier The identifier of the content being queried.
///
///
/// returns:
/// The URL of the content on disk.
- (NSURL * _Nonnull)contentLoader:(JWDRMContentLoader * _Nonnull)contentLoader urlForPersistableContentKey:(NSString * _Nonnull)contentKeyIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Reports an error if one occurs.
/// \param contentLoader The <code>JWDRMContentLoader</code> instance.
///
/// \param error The error which occurred.
///
- (void)contentLoader:(JWDRMContentLoader * _Nonnull)contentLoader failedWithError:(JWError * _Nonnull)error;
@end


/// This loader is used to interface with FairPlay and decode streams for download.
SWIFT_CLASS("_TtC11JWPlayerKit18JWDRMContentLoader")
@interface JWDRMContentLoader : NSObject
/// This is the initializer. Designating a key manager is optional, but if one is specified it will receive events for persistable content.
/// \param dataSource The content key data source for processing licensed content.
///
/// \param keyManager The content key manager associated with this loader.
///
- (nonnull instancetype)initWithDataSource:(id <JWDRMContentKeyDataSource> _Nonnull)dataSource keyManager:(id <JWDRMContentKeyManager> _Nullable)keyManager OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class JWPlayerItem;

@interface JWDRMContentLoader (SWIFT_EXTENSION(JWPlayerKit))
/// Loads the supplied items as persistable content.
/// \param items An array of items to load.
///
- (void)loadWithItems:(NSArray<JWPlayerItem *> * _Nonnull)items;
/// Loads content from a JW Player Dashboard playlist URL.
/// \param url The URL designating the playlist. This URL must be to a playlist defined in the JW Player dashboard or a signed URL for a playlist.
///
- (void)loadWithPlaylist:(NSURL * _Nonnull)url;
@end

/// Types of DRM encryption
typedef SWIFT_ENUM(NSInteger, JWDRMEncryption, open) {
/// No DRM encryption is used
  JWDRMEncryptionNone = 0,
/// Fairplay DRM encryption is used
  JWDRMEncryptionFairplay = 1,
};


/// Date range metadata. Fired when playback enters the section of an HLS
/// stream tagged with #EXT-X-DATERANGE.
SWIFT_CLASS("_TtC11JWPlayerKit19JWDateRangeMetadata")
@interface JWDateRangeMetadata : NSObject
/// EXT-X-DATERANGE attribute list
@property (nonatomic, readonly, copy) NSArray<NSDictionary<NSString *, id> *> * _Null_unspecified attributes;
/// Duration of the EXT-X-DATERANGE
@property (nonatomic, readonly) NSTimeInterval duration;
/// Start time of the cue in seconds relative to the current time of the stream.
@property (nonatomic, readonly) NSTimeInterval start;
/// End time of the cue in seconds relative to the current time of the stream.
@property (nonatomic, readonly) NSTimeInterval end;
/// EXT-X-DATERANGE start date.
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified startDate;
/// EXT-X-DATERANGE end date.
@property (nonatomic, readonly, copy) NSDate * _Nullable endDate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Listens for date range metadata events during playback.
SWIFT_PROTOCOL("_TtP11JWPlayerKit27JWDateRangeMetadataDelegate_")
@protocol JWDateRangeMetadataDelegate
/// Triggered once a metadata cue point is buffered.
/// \param player The player that parsed the date range cue.
///
/// \param metadata Contains information about the parsed date range cue.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player dateRangeMetadataCueParsed:(JWDateRangeMetadata * _Nonnull)metadata;
/// Triggered when playback enters a time range where date range metadata is active.
/// \param player The player that triggered the date range event.
///
/// \param metadata Contains information about the active date range metadata.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player dateRangeMetadata:(JWDateRangeMetadata * _Nonnull)metadata;
@end

@class NSCoder;

/// A custom error class.
SWIFT_CLASS("_TtC11JWPlayerKit7JWError")
@interface JWError : NSError
/// A single-word description of the error to make this error easy to key off of.
@property (nonatomic, readonly, copy) NSString * _Nonnull key;
/// A detailed description of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull errorDescription;
/// A localized description of the error.
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end


/// Metadata that can be passed externally to supplement the encoded metadata of the underlying media asset.
SWIFT_CLASS("_TtC11JWPlayerKit18JWExternalMetadata")
@interface JWExternalMetadata : NSObject
/// A unique identifier used to identify metadata when it surfaces.
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Start time of the external metadata.
@property (nonatomic, readonly) NSTimeInterval startTime;
/// End time of the external metadata.
@property (nonatomic, readonly) NSTimeInterval endTime;
/// Initializer for creating metadata.
/// \param identifier A string used to identify the metadata.
///
/// \param startTime The number of seconds into the content when the metadata should be reported.
///
/// \param endTime The number of seconds into the content when the metadata information ends.
///
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier startTime:(NSTimeInterval)startTime endTime:(NSTimeInterval)endTime OBJC_DESIGNATED_INITIALIZER;
/// Overridden to provide more accurate value comparisons.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Listens for metadata events defined by the developer during playback.
SWIFT_PROTOCOL("_TtP11JWPlayerKit26JWExternalMetadataDelegate_")
@protocol JWExternalMetadataDelegate
/// Triggered when the metadata cue point is buffered.
/// \param player The player that parsed the metadata cue.
///
/// \param metadata Contains information about the parsed metadata cue.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player externalMetadataCueParsed:(JWExternalMetadata * _Nonnull)metadata;
/// Triggered when playback enters the time range where external metadata was defined.
/// \param player The player that triggered the external metadata event.
///
/// \param metadata Contains information about the active external metadata.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player externalMetadata:(JWExternalMetadata * _Nonnull)metadata;
@end


/// A settings object containing information regarding external playback.
SWIFT_CLASS("_TtC11JWPlayerKit26JWExternalPlaybackSettings")
@interface JWExternalPlaybackSettings : NSObject
/// Only the SDK can intantiate this class.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A builder for creating instances of <code>JWExternalPlaybackSettings</code>.
SWIFT_CLASS("_TtC11JWPlayerKit33JWExternalPlaybackSettingsBuilder")
@interface JWExternalPlaybackSettingsBuilder : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum JWFriendlyObstructionPurpose : NSInteger;

/// This class represents an obstruction that is marked as friendly for viewability measurement purposes.
SWIFT_CLASS("_TtC11JWPlayerKit21JWFriendlyObstruction")
@interface JWFriendlyObstruction : NSObject
/// Initializer for creating a friendly obstruction.
/// \param view The obstructing view.
///
/// \param purpose The purpose of the obstruction.
///
/// \param reason An optional string describing the reason for the obstruction.
///
- (nonnull instancetype)initWithView:(UIView * _Nonnull)view purpose:(enum JWFriendlyObstructionPurpose)purpose reason:(NSString * _Nullable)reason OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// This manager provides methods to modify the existing list of friendly obstructions.
SWIFT_PROTOCOL("_TtP11JWPlayerKit28JWFriendlyObstructionManager_")
@protocol JWFriendlyObstructionManager
/// A collection of registered obstructions.
@property (nonatomic, readonly, copy) NSArray<JWFriendlyObstruction *> * _Nonnull obstructions;
/// Adds the given obstructions.
/// \param obstructions An array of friendly ad obstructions to be added.
///
- (void)register:(NSArray<JWFriendlyObstruction *> * _Nonnull)obstructions;
/// Removes the given obstructions.
/// \param obstructions An array of friendly ad obstructions that will be removed.
///
- (void)deregister:(NSArray<JWFriendlyObstruction *> * _Nonnull)obstructions;
/// Removes all obstructions from the manager.
- (void)deregisterAllObstructions;
@end

/// Constants describing the intended purpose of the obstruction.
typedef SWIFT_ENUM(NSInteger, JWFriendlyObstructionPurpose, open) {
/// The obstruction serves as additional media controls.
  JWFriendlyObstructionPurposeMediaControls = 0,
/// The obstruction is a controls which closes the ad.
  JWFriendlyObstructionPurposeCloseAd = 1,
/// The obstruction is not visible.
  JWFriendlyObstructionPurposeNotVisible = 2,
/// A catch-all value for all other undefined purposes for an obstruction.
  JWFriendlyObstructionPurposeOther = 3,
};


/// This class allows to register views considered as friendly obstructions.
/// Friendly obstructions are views such as video controls that are essential to the user’s experience but do not impact viewability. Once registered as such, these controls are excluded from ad viewability measurements. These controls must only be fully transparent overlays or small buttons. Any other non-control views must not be registered.
/// When ad viewability via the OMSDK is calculated, all views overlaying the media element are considered obstructions and reduce the viewability rate.
/// You may register:
/// <ul>
///   <li>
///     A transparent overlay used to capture user taps.
///   </li>
///   <li>
///     Transient buttons such as:
///     <ul>
///       <li>
///         Pause
///       </li>
///       <li>
///         Play
///       </li>
///       <li>
///         Fullscreen
///       </li>
///       <li>
///         Cast/AirPlay
///       </li>
///       <li>
///         Collapse
///       </li>
///       <li>
///         Progress/Seek
///       </li>
///       <li>
///         Other playback relevant actions
///       </li>
///     </ul>
///   </li>
/// </ul>
/// You must NOT register:
/// <ul>
///   <li>
///     Watermarks
///   </li>
///   <li>
///     Pop ups
///   </li>
///   <li>
///     Dialogs
///   </li>
///   <li>
///     Non-transient buttons
///   </li>
///   <li>
///     Other obscuring views
///   </li>
/// </ul>
/// note:
/// Applicable to Google IMA & DAI ad clients only. For more information, see <a href="https://developers.google.com/interactive-media-ads/docs/sdks/ios/omsdk">Open Measurement in the IMA SDK</a>
SWIFT_CLASS("_TtC11JWPlayerKit31JWFriendlyObstructionsContainer")
@interface JWFriendlyObstructionsContainer : NSObject
/// The initializer for the container, which takes an array of friendly obstructions.
/// \param obstructions An array of <code>JWFriendlyObstructions</code> to initialize the container with.
///
- (nonnull instancetype)initWithObstructions:(NSArray<JWFriendlyObstruction *> * _Nullable)obstructions OBJC_DESIGNATED_INITIALIZER;
/// Register friendly obstructions.
/// \param obstructions Array with friendly obstructions
///
- (void)registerWithObstructions:(NSArray<JWFriendlyObstruction *> * _Nonnull)obstructions;
/// Unregister previously registered friendly obstructions.
/// \param obstructions Array with friendly obstructions.
///
- (void)unregisterWithObstructions:(NSArray<JWFriendlyObstruction *> * _Nonnull)obstructions;
/// Unregister all previously registered friendly obstructions.
- (void)unregisterAllObstructions;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIPresentationController;
@class UITraitCollection;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

/// This is the default UIViewController which is used when the player takes over the entire screen.
SWIFT_CLASS("_TtC11JWPlayerKit26JWFullScreenViewController")
@interface JWFullScreenViewController : UIViewController <UIPopoverPresentationControllerDelegate>
/// If true, all full screen views are forced into landscape orientation. The default value is <code>true</code>.
@property (nonatomic) BOOL displayInLandscape;
@property (nonatomic, readonly) BOOL prefersHomeIndicatorAutoHidden;
/// The interface orientation to use when presenting the view controller.
@property (nonatomic, readonly) UIInterfaceOrientation preferredInterfaceOrientationForPresentation;
/// Called after the controller’s view is loaded into memory.
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
/// Asks the delegate for the presentation style to use when the specified set of traits are active.
/// \param controller The presentation controller that is managing the size change. Use this object to retrieve the view controllers involved in the presentation.
///
/// \param traitCollection The traits representing the target environment.
///
- (UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController * _Nonnull)controller traitCollection:(UITraitCollection * _Nonnull)traitCollection SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate that an adaptivity-related transition is about to occur.
/// \param presentationController The presentation controller that is managing the adaptivity change.
///
/// \param style The new presentation style. If the presentation style is not changing, this parameter is set to <code>UIModalPresentationStyle.none</code>.
///
/// \param transitionCoordinator The transition coordinator that is managing the transition.
///
- (void)presentationController:(UIPresentationController * _Nonnull)presentationController willPresentWithAdaptiveStyle:(UIModalPresentationStyle)style transitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nullable)transitionCoordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end














/// Used to configure Google DAI streams based on the provided information.
SWIFT_CLASS("_TtC11JWPlayerKit17JWGoogleDAIStream")
@interface JWGoogleDAIStream : NSObject
/// This init is internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The builder for JWGoogleDAIStream, object used to play ads using the DAI client.
SWIFT_CLASS("_TtC11JWPlayerKit24JWGoogleDAIStreamBuilder")
@interface JWGoogleDAIStreamBuilder : NSObject
/// Builds a <code>JWGoogleDAIStream</code> structure for use in Google DAI ads.
/// <ul>
///   <li>
///     throws An error if the stream is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWGoogleDAIStream</code> object.
///   </li>
/// </ul>
- (JWGoogleDAIStream * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the video and content source identifiers for the stream.
/// note:
/// Used for VoD. If live stream information is also set using <code>liveStreamInfo()</code>, calling <code>build()</code> will throw an exception.
/// \param videoID The video identifier for the stream.
///
/// \param cmsID The content source identifier for the stream.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWGoogleDAIStreamBuilder * _Nonnull)vodStreamInfoWithVideoID:(NSString * _Nonnull)videoID cmsID:(NSString * _Nonnull)cmsID;
/// Sets the asset key for the stream.
/// note:
/// Used for live streams. If VoD stream information is also set using <code>vodStreamInfo()</code>, calling <code>build()</code> will throw an exception.
/// \param assetKey The stream’s asset key.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWGoogleDAIStreamBuilder * _Nonnull)liveStreamInfoWithAssetKey:(NSString * _Nonnull)assetKey;
/// Sets the advertising configuration’s API key.
/// \param apiKey A stream request API key that is used to verify applications.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWGoogleDAIStreamBuilder * _Nonnull)apiKey:(NSString * _Nonnull)apiKey;
/// Sets ad tag parameters to be overridden on your stream request.
/// \param adTagParameters A limited set of ad tag parameters to be overridden on your stream request.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWGoogleDAIStreamBuilder * _Nonnull)adTagParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)adTagParameters;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// ID3 metadata. Fires when playback buffers a section of
/// an HLS stream containing ID3 tags.
SWIFT_CLASS("_TtC11JWPlayerKit13JWID3Metadata")
@interface JWID3Metadata : NSObject
/// Start time, in seconds, of the metadata cue.
@property (nonatomic, readonly) double start;
/// Object containing all the information relevant to the HLS ID3 tag
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Null_unspecified metadata;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Listens for ID3 metadata events during playback.
SWIFT_PROTOCOL("_TtP11JWPlayerKit21JWID3MetadataDelegate_")
@protocol JWID3MetadataDelegate
/// Triggered when playback enters the time range where new metadata becomes active
/// \param player The player reporting this event
///
/// \param metadata The buffered metadata.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player id3Metadata:(JWID3Metadata * _Nonnull)metadata;
@end












/// Constants indicating the reason the player is in the idle state.
typedef SWIFT_ENUM(NSInteger, JWIdleReason, open) {
/// Player went into idle because the content ended.
  JWIdleReasonComplete = 0,
/// Player is in the initial idle state.
  JWIdleReasonIdle = 1,
/// Unknown reason.
  JWIdleReasonUnknown = 2,
};

@class JWImaSettings;

/// Used to build a <code>JWAdvertisingConfig</code> object to play ads using the IMA client.
SWIFT_CLASS("_TtC11JWPlayerKit29JWImaAdvertisingConfigBuilder")
@interface JWImaAdvertisingConfigBuilder : NSObject
/// Builds an advertising config based off the settings provided.
/// <ul>
///   <li>
///     throws An error if the config is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWAdvertisingConfig</code> object.
///   </li>
/// </ul>
- (JWAdvertisingConfig * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets a VMAP URL.
/// \param vmapURL Either a local or remote URL of the vmap file.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaAdvertisingConfigBuilder * _Nonnull)vmapURL:(NSURL * _Nonnull)vmapURL;
/// Sets an array of <code>JWAdBreak</code> objects that provide info about ad breaks.
/// note:
/// If an ad schedule is also set using <code>tag()</code>, calling <code>build()</code> will throw an exception.
/// \param schedule An array of <code>JWAdBreak</code> objects that provide information about ad breaks.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaAdvertisingConfigBuilder * _Nonnull)schedule:(NSArray<JWAdBreak *> * _Nonnull)schedule;
/// Sets the URL of the VAST tag.
/// note:
/// Can also specify the VAST VMAP file to use for ad breaks.
/// note:
/// If an ad schedule is also set using <code>schedule()</code>, calling <code>build()</code> will throw an exception.
/// \param tag The URL of the VAST tag.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaAdvertisingConfigBuilder * _Nonnull)tag:(NSURL * _Nonnull)tag;
/// Sets the rules for how often a user sees ads while watching the video content.
/// \param adRules Defines playback rules for the scheduled ads.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaAdvertisingConfigBuilder * _Nonnull)adRules:(JWAdRules * _Nonnull)adRules;
/// The container with obstructions that should be marked as friendly.
/// note:
/// The viewability measurement may be affected if obstructions above the player view are not registered properly.
/// note:
/// If the friendly obstructions array is modified, it will be registered until the next ad schedule is loaded or the current playlist item is replayed.
/// seealso:
/// <a href="x-source-tag://FriendlyObstructionsContainer">FriendlyObstructionsContainer.swift</a>
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaAdvertisingConfigBuilder * _Nonnull)friendlyObstructionsContainer:(JWFriendlyObstructionsContainer * _Nonnull)container;
/// The Google IMA SDK settings.
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaAdvertisingConfigBuilder * _Nonnull)imaSettings:(JWImaSettings * _Nonnull)imaSettings;
/// The array of companion ad slot to serve accompanying content for IMA ads.
/// seealso:
/// <a href="x-source-tag://JWCompanionAdSlot">JWCompanionAdSlot.swift</a>
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaAdvertisingConfigBuilder * _Nonnull)companionAdSlots:(NSArray<JWCompanionAdSlot *> * _Nonnull)companionAdSlots SWIFT_AVAILABILITY(tvos,unavailable);
/// Adds a companion ad slot to serve accompanying content for IMA ads.
/// note:
/// This method adds to the existing companion ad slots, and does not overwrite the existing value.
/// seealso:
/// <a href="x-source-tag://JWCompanionAdSlot">JWCompanionAdSlot.swift</a>
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaAdvertisingConfigBuilder * _Nonnull)companionAdSlot:(JWCompanionAdSlot * _Nonnull)companionAdSlot SWIFT_AVAILABILITY(tvos,unavailable);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Used to build a <code>JWAdvertisingConfig</code> object to play ads using the DAI client.
SWIFT_CLASS("_TtC11JWPlayerKit32JWImaDaiAdvertisingConfigBuilder")
@interface JWImaDaiAdvertisingConfigBuilder : NSObject
/// Builds an advertising config based off the settings provided.
/// <ul>
///   <li>
///     throws An error if the config is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWAdvertisingConfig</code> object.
///   </li>
/// </ul>
- (JWAdvertisingConfig * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the GoogleDAI stream configuration.
/// \param googleDAIStream A GoogleDAIStream object that contains the stream information.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaDaiAdvertisingConfigBuilder * _Nonnull)googleDAIStream:(JWGoogleDAIStream * _Nonnull)googleDAIStream;
/// Sets the container with obstructions that should be marked as friendly.
/// note:
/// The viewability measurement may be affected if obstructions above the player view are not registered properly.
/// note:
/// If the friendly obstructions array is modified, it will be registered until the next ad schedule is loaded or the current playlist item is replayed.
/// seealso:
/// <a href="x-source-tag://FriendlyObstructionsContainer">FriendlyObstructionsContainer.swift</a>
/// \param container The container with obstructions that should be marked as friendly.
///
- (JWImaDaiAdvertisingConfigBuilder * _Nonnull)friendlyObstructionsContainer:(JWFriendlyObstructionsContainer * _Nonnull)container;
/// The Google IMA SDK settings.
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaDaiAdvertisingConfigBuilder * _Nonnull)imaSettings:(JWImaSettings * _Nonnull)imaSettings;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>JWImaSettings</code> class encompasses the Google IMA SDK settings.
SWIFT_CLASS("_TtC11JWPlayerKit13JWImaSettings")
@interface JWImaSettings : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The builder for <code>JWImaSettings</code>, object used to configure the Google IMA SDK.
SWIFT_CLASS("_TtC11JWPlayerKit20JWImaSettingsBuilder")
@interface JWImaSettingsBuilder : NSObject
/// Builds a <code>JWImaSettings</code> structure for configure the Google IMA SDK.
/// <ul>
///   <li>
///     returns A <code>JWImaSettings</code> object.
///   </li>
/// </ul>
- (JWImaSettings * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
/// Sets the desired language for Google IMA SDK.
/// \param locale The language code used to localize the UI provided by the Google IMA SDK.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaSettingsBuilder * _Nonnull)locale:(NSString * _Nonnull)locale;
/// Sets the Publisher Provided Identification (PPID) that will be sent with ads request.
/// \param ppid The publisher provided identification String.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaSettingsBuilder * _Nonnull)ppid:(NSString * _Nonnull)ppid;
/// Set the maximum number of redirects.
/// \param redirectLimit An unsigend integer for the amount of redirects allowed.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaSettingsBuilder * _Nonnull)maxRedirects:(NSUInteger)redirectLimit;
/// Sets the session ID to identify a single user session. This should be a UUID string.
/// \param sessionID A String for a unique identifier.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaSettingsBuilder * _Nonnull)sessionID:(NSString * _Nonnull)sessionID;
/// Enable the IMA debug mode which will output detailed log information to the console.
/// warning:
/// This should be disabled for releases.
/// \param enabled A boolean for the expected debug mode.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWImaSettingsBuilder * _Nonnull)debugMode:(BOOL)enabled;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Constants representing the behavior of the interface.
typedef SWIFT_ENUM(NSInteger, JWInterfaceBehavior, open) {
/// The interface is enabled, and reacts to the user’s input in a default manner.
  JWInterfaceBehaviorNormal = 0,
/// The interface is disabled, and never visible on the screen.
  JWInterfaceBehaviorHidden = 1,
/// The interface is always on the screen, and never goes away.
  JWInterfaceBehaviorAlwaysOnScreen = 2,
};

@class JWPlayerConfiguration;

/// This JSON parser helps to convert a json object into a <code>JWPlayerConfiguration</code> using the different configuration builders provided by <code>JWPlayerKit</code>.
SWIFT_CLASS("_TtC11JWPlayerKit12JWJSONParser")
@interface JWJSONParser : NSObject
/// Convert the content of a file into a <code>JWPlayerConfiguration</code>.
/// note:
/// The provided file must follow a proper JSON format.
/// \param url The <code>URL</code> to read.
///
///
/// throws:
/// An error if the file can not be converted properly.
///
/// returns:
/// A <code>JWPlayerConfiguration</code> used to configure a <code>JWPlayer</code>.
+ (JWPlayerConfiguration * _Nullable)configFromUrl:(NSURL * _Nonnull)url error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Convert a JSON object into a <code>JWPlayerConfiguration</code>.
/// \param jsonData The JSON data.
///
///
/// throws:
/// An error if the json data can not be converted properly.
///
/// returns:
/// A <code>JWPlayerConfiguration</code> used to configure a <code>JWPlayer</code>.
+ (JWPlayerConfiguration * _Nullable)configFromJSON:(NSData * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// JWLockScreenManager allows setting the active JWPlayer that will be shown on the NowPlaying Controls.
/// important:
/// In your App´s <em>Signing & Capabilities</em> you should add <em>Background Modes</em>:
/// <ul>
///   <li>
///     Audio.
///   </li>
///   <li>
///     AirPlay.
///   </li>
///   <li>
///     and Picture in Picture.
///   </li>
/// </ul>
/// <h3>Notes:</h3>
/// In order for the lock screen controls to be visible:
/// <ul>
///   <li>
///     Background audio must be enabled.
///   </li>
///   <li>
///     The audio session must be set to <code>AVAudioSessionCategoryPlayback</code>.
///   </li>
/// </ul>
/// By default when using more than one player, the last player played will have priority on NowPlaying Controls.
SWIFT_CLASS("_TtC11JWPlayerKit19JWLockScreenManager")
@interface JWLockScreenManager : NSObject
/// A shared instance of the JWLockScreenController.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) JWLockScreenManager * _Nonnull shared;)
+ (JWLockScreenManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// The active player to be synchronized with the NowPlaying Controls.
/// precondition:
/// If this player is set to nil then the lockscreen will be disabled.
/// \param player JWPlayer object to be synchronized with NowPlaying Controls.
///
- (void)activeLockScreenPlayer:(id <JWPlayer> _Nonnull)player;
/// Removes the player if it’s the same that was being tracked for NowPlaying Controls.
/// \param player JWPlayer object that might been tracked.
///
- (void)removePlayer:(id <JWPlayer> _Nonnull)player;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Defines a logo which is overlayed on the player.
SWIFT_CLASS("_TtC11JWPlayerKit6JWLogo")
@interface JWLogo : NSObject
/// This init is internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIImage;
enum JWLogoPosition : NSInteger;

/// The builder for JWLogo.
SWIFT_CLASS("_TtC11JWPlayerKit13JWLogoBuilder")
@interface JWLogoBuilder : NSObject
/// Builds a <code>JWLogo</code> structure for use in ads.
/// <ul>
///   <li>
///     throws An error if the logo is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWLogo</code> object.
///   </li>
/// </ul>
- (JWLogo * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the logo’s image using the specified UIImage.
/// The dimensions of the logo will match the dimensions of the image provided without resizing. For example, an image of 100x50 pixels will render a logo of 100x50, regardless of the dimensions of the player window.
/// note:
/// If both a URL and a UIImage are provided, the UIImage takes precedence and the URL is ignored. The SDK supports all formats supported by UIImage.
/// \param image A UIImage to be displayed.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWLogoBuilder * _Nonnull)image:(UIImage * _Nonnull)image;
/// Sets the logo’s image by downloading the image at the specified URL.
/// The dimensions of the logo will match the dimensions of the image provided without resizing. For example, an image of 100x50 pixels will render a logo of 100x50, regardless of the dimensions of the player window.
/// note:
/// If both a URL and a UIImage are provided, the UIImage takes precedence and the URL is ignored. The SDK supports all formats supported by UIImage.
/// \param imageFile The URL of the image to download and use as a logo.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWLogoBuilder * _Nonnull)imageFile:(NSURL * _Nonnull)imageFile;
/// Determines if the logo appears and disappears with the controls, but only if the controls are set to fade.
/// If the controls are not set to fade, the logo is visible when the controls are visible and not be visible when the controls are turned off. If unspecified, this parameter The default value is <code>false</code>.
/// \param fades If true, the logo will fade when the controls fade. If false, the logo will persist.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWLogoBuilder * _Nonnull)fades:(BOOL)fades;
/// URL to which a user is sent when the logo is tapped.
/// \param weblink The URL to present to the user when the logo is tapped.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWLogoBuilder * _Nonnull)weblink:(NSURL * _Nonnull)weblink SWIFT_AVAILABILITY(tvos,unavailable);
/// Distance between the logo and the player’s edge, specified in points. If unspecified, this parameter The default value is <code>8</code>.
/// \param margin The desired amount of space between the logo and player’s edge.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWLogoBuilder * _Nonnull)margin:(NSInteger)margin;
/// Defines the corner on the player in which the logo displays. If unspecified, this parameter The default value is <code>.topLeft</code>.
/// \param position The corner on the player in which the logo displays.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWLogoBuilder * _Nonnull)position:(enum JWLogoPosition)position;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Constants denoting where to position the logo on the screen.
typedef SWIFT_ENUM(NSInteger, JWLogoPosition, open) {
/// The top-right corner of the player.
  JWLogoPositionTopRight = 0,
/// The top-left corner of the player.
  JWLogoPositionTopLeft = 1,
/// The bottom-right corner of the player.
  JWLogoPositionBottomRight = 2,
/// The top-left corner of the player.
  JWLogoPositionBottomLeft = 3,
};

@class JWTimeRange;

/// Media metadata. Fires when the initial metadata of content has loaded.
SWIFT_CLASS("_TtC11JWPlayerKit15JWMediaMetadata")
@interface JWMediaMetadata : NSObject
/// Length of the media asset
@property (nonatomic, readonly) NSTimeInterval duration;
/// Height dimension of the media asset
@property (nonatomic, readonly) double height;
/// Width dimension of the media asset
@property (nonatomic, readonly) double width;
/// The number of frames per second for tracks that carry a full frame per media sample.
@property (nonatomic, readonly) double frameRate;
/// Time range representing how much content is available to buffer in live stream or for seeking in DVR.
@property (nonatomic, readonly, strong) JWTimeRange * _Nonnull seekRange;
/// The type of DRM encryption the content is using
@property (nonatomic, readonly) enum JWDRMEncryption drmEncryption;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Listens for media metadata when the video is done loading
SWIFT_PROTOCOL("_TtP11JWPlayerKit23JWMediaMetadataDelegate_")
@protocol JWMediaMetadataDelegate
/// Fires when the initial metadata of the video has loaded.
/// \param player The player that receives metadata about the media.
///
/// \param metadata Metadata about the current media.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didReceiveMediaMetadata:(JWMediaMetadata * _Nonnull)metadata;
@end

enum JWTrackType : NSInteger;

/// Represents a specific option for the presentation of media.
SWIFT_CLASS("_TtC11JWPlayerKit22JWMediaSelectionOption")
@interface JWMediaSelectionOption : NSObject
/// Provides a String suitable for display using the current system locale.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Indicates the RFC 4646 language tag associated with the option.
@property (nonatomic, readonly, copy) NSString * _Nullable extendedLanguageTag;
/// The type of track represented by this option.
@property (nonatomic, readonly) enum JWTrackType trackType;
/// Indicates whether or not this is the default option in the group.
@property (nonatomic, readonly) BOOL defaultOption;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Constants indicating which type of media the content is.
typedef SWIFT_ENUM(NSInteger, JWMediaType, open) {
/// Media is unknown
  JWMediaTypeUnknown = 0,
/// Media is audio
  JWMediaTypeAudio = 1,
/// Media is video and audio
  JWMediaTypeVideo = 2,
};


/// Defines the style for the control bar on a player.
SWIFT_CLASS("_TtC11JWPlayerKit11JWMenuStyle")
@interface JWMenuStyle : NSObject
/// This init is internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The builder for JWMenuStyle.
SWIFT_CLASS("_TtC11JWPlayerKit18JWMenuStyleBuilder")
@interface JWMenuStyleBuilder : NSObject
/// Builds a <code>JWMenuStyle</code> structure.
/// <ul>
///   <li>
///     throws An error if the style is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWMenuStyle</code> object.
///   </li>
/// </ul>
- (JWMenuStyle * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the font color of text in the menu.
/// \param fontColor The color for the text on the menu.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWMenuStyleBuilder * _Nonnull)fontColor:(UIColor * _Nonnull)fontColor;
/// Sets the font of the text on the menu.
/// \param font The font to be set on the menu.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWMenuStyleBuilder * _Nonnull)font:(UIFont * _Nonnull)font;
/// Set the color of the background in the menu.
/// \param backgroundColor The color for the background in the menu.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWMenuStyleBuilder * _Nonnull)backgroundColor:(UIColor * _Nonnull)backgroundColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol JWProgramDateTimeMetadataDelegate;

/// Delegates that surface different types of metadata from the player.
SWIFT_CLASS("_TtC11JWPlayerKit19JWMetadataDelegates")
@interface JWMetadataDelegates : NSObject
/// Surfaces access log entries from the <code>JWPlayerItem</code>.
@property (nonatomic, weak) id <JWAccessLogMetadataDelegate> _Nullable accessLogMetadataDelegate;
/// Surfaces date range metadata.
@property (nonatomic, weak) id <JWDateRangeMetadataDelegate> _Nullable dateRangeMetadataDelegate;
/// Surfaces ID3 metadata.
@property (nonatomic, weak) id <JWID3MetadataDelegate> _Nullable id3MetadataDelegate;
/// Surfaces metadata defined by the developer.
@property (nonatomic, weak) id <JWExternalMetadataDelegate> _Nullable externalMetadataDelegate;
/// Surfaces program-date-time metadata.
@property (nonatomic, weak) id <JWProgramDateTimeMetadataDelegate> _Nullable programDateTimeMetadataDelegate;
/// Surfaces metadata about the media content when it first loads.
@property (nonatomic, weak) id <JWMediaMetadataDelegate> _Nullable mediaMetadataDelegate;
/// Make init internal so the developer can not create the struct themselves.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Used to define the next up card’s style.
SWIFT_CLASS("_TtC11JWPlayerKit13JWNextUpStyle")
@interface JWNextUpStyle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Used to build a  new <code>JWNextUpStyle</code> to configure the next up card.
/// note:
/// An Offset is required.
SWIFT_CLASS("_TtC11JWPlayerKit20JWNextUpStyleBuilder")
@interface JWNextUpStyleBuilder : NSObject
/// Builds a <code>JWNextUpStyle</code> structure.
/// <ul>
///   <li>
///     throws An error if the style is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWNextUpStyle</code> object.
///   </li>
/// </ul>
- (JWNextUpStyle * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// When to pop up the card expressed as a percentage of the duration of the video. A negative value specifies from the end of the video. Must be a value from -100 - 100.
/// \param percentage The relative percentage of the media duration to show the card.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWNextUpStyleBuilder * _Nonnull)timeOffsetWithPercentage:(float)percentage;
/// When to pop up the card expressed as a number of seconds. A negative value specifies from the end of the video.
/// \param seconds The time in seconds to wait to display the card.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWNextUpStyleBuilder * _Nonnull)timeOffsetWithSeconds:(NSTimeInterval)seconds;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This object contains configuration information for using Open Measurement.
SWIFT_CLASS("_TtC11JWPlayerKit12JWOMIDConfig")
@interface JWOMIDConfig : JWAdTrackerConfig
@end


/// A builder for creating a JWOMIDConfig.
SWIFT_CLASS("_TtC11JWPlayerKit19JWOMIDConfigBuilder")
@interface JWOMIDConfigBuilder : NSObject
/// Builds a <code>JWOMIDConfig</code> object for use in tracking ads.
/// <ul>
///   <li>
///     throws An error if the Open Measurement SDK is not linked with the application.
///   </li>
///   <li>
///     returns A <code>JWOMIDConfig</code> object.
///   </li>
/// </ul>
- (JWOMIDConfig * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Specify a list of vendors whose code is allowed to execute in Open Measurement.
/// \param vendors A list of vendor identities.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWOMIDConfigBuilder * _Nonnull)allowedVendors:(NSArray<NSString *> * _Nonnull)vendors;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Constants indicating the reason the player is in the pause state.
typedef SWIFT_ENUM(NSInteger, JWPauseReason, open) {
/// Player is paused due to external api call.
  JWPauseReasonExternal = 0,
/// Player is paused due to user interaction.
  JWPauseReasonInteraction = 1,
/// Player is paused due to a clickthrough.
  JWPauseReasonClickthrough = 2,
/// Playback paused due to the player being less than 50% visible.
  JWPauseReasonViewable = 3,
/// Player is paused due to user interaction with the settings menu.
  JWPauseReasonSettingsInteraction = 4,
/// Player is paused due to user interaction with the related menu.
  JWPauseReasonRelatedInteraction = 5,
/// Player is paused when playback cannot start automatically because the player is not visible.
  JWPauseReasonAutostart = 6,
/// Unknown reason.
  JWPauseReasonUnknown = 7,
};

/// Constants indicating the reason the player is in the play state.
typedef SWIFT_ENUM(NSInteger, JWPlayReason, open) {
/// Player is playing due to external api call.
  JWPlayReasonExternal = 0,
/// Player is playing due to user interaction.
  JWPlayReasonInteraction = 1,
/// Playback began due to natural playlist progression.
  JWPlayReasonPlaylist = 2,
/// Playback began due to autostart setting or when the player is 50% visible.
  JWPlayReasonViewable = 3,
/// Playback began due to repeat flag is enabled.
  JWPlayReasonRepeatContent = 4,
/// Player is playing due to user interaction with the related menu.
  JWPlayReasonRelatedInteraction = 5,
/// Player is playing due to the auto advance feature.
  JWPlayReasonRelatedAuto = 6,
/// Player is playing due to autostart flag.
  JWPlayReasonAutostart = 7,
/// Playback resumed due to user interaction with the settings menu.
  JWPlayReasonSettingsInteraction = 8,
/// Player is playing but the cause is unknown.
  JWPlayReasonUnknown = 9,
};

enum JWPlayerState : NSInteger;

/// Methods and properties for interfacing with the player to control it, and query information.
SWIFT_PROTOCOL("_TtP11JWPlayerKit16JWPlayerProtocol_")
@protocol JWPlayerProtocol
/// Sets the initial configuration of the player.
/// Calling this method will reset the player when it is called, even if it has been called before. Any errors during setup or playback will be reported to the JWPlayerDelegate.
/// note:
/// This method can be called multiple times throughout the lifecycle of the player, but once invoked it should not be called again until <code>jwplayerIsReady</code> or an error has been reported to the <code>JWPlayerDelegate</code>.
/// \param configuration The config to initialize the player with.
///
- (void)configurePlayerWith:(JWPlayerConfiguration * _Nonnull)configuration;
/// The volume relative to the volume of the device. All values are clamped from 0.0 (mute) to 1.0 (current volume of the device).
@property (nonatomic) double volume;
/// The playback rate at which media is being reproduced. The default value is 1.0.
/// Setting this property to 1.0 will play the media at its natural rate. Ability to set a different value is limited to the rates supported by the media item; if an unsupported rate is requested, playbackRate will not change. Rates between 0.0 and 1.0 will slow forward, rates greater than 1.0 will fast forward, rates between 0.0 and -1.0 will slow reverse, and rates lower than -1.0 will fast reverse. Cannot be set to 0; to pause playback, instead, call the pause method.
/// note:
/// This property will have no effect when ads are being played, or when casting.
@property (nonatomic) double playbackRate;
/// The position and duration of the currently loaded media.
@property (nonatomic, readonly, strong) JWTimeData * _Nonnull time;
/// Informs the player be begin or continue playing the content.
- (void)play;
/// Pauses the currently playing content.
- (void)pause;
/// Stops the player (returning it to the idle state) and unloads the currently playing media file.
- (void)stop;
/// Seeks the player to the given time in seconds.
/// \param seconds The time to seek to in the video, expressed in seconds.
///
- (void)seekTo:(NSTimeInterval)seconds;
/// Rewinds the player the given number of seconds.
/// \param seconds The time to rewind back in the video, expressed in seconds.
///
- (void)rewindWithSeconds:(NSTimeInterval)seconds;
/// Fast forwards the player the given number of seconds.
/// \param seconds The time to fast forward in the video, expressed in seconds.
///
- (void)forwardWithSeconds:(NSTimeInterval)seconds;
/// Skips the current content, and proceeds to the next item in the playlist.
- (void)next;
/// Stops the current content, and plays the previous video in the playlist.
- (void)previous;
/// Plays an ad immediately, which is primarily useful for situations where the built-in ad schedule of JW Player cannot be used.
/// In order to utilize this method, you must supply an ad configuration to your <code>JWPlayerConfiguration</code>. This configuration can either be empty, or have a default ad tag.
/// \code
/// let vastConfig = try JWAdsAdvertisingConfigBuilder().build()
///
/// \endcodeor
/// \code
/// let imaConfig = try JWImaAdvertisingConfigBuilder().build()
///
/// \endcodewarning:
/// This function is not avilable for the Google IMA DAI ad client.
/// \param tag The VAST tag URL that should be loaded into the player.
///
/// \param client The ad client to use. This feature is not supported by Google IMA DAI.
///
- (void)playWithAd:(NSURL * _Nonnull)tag client:(enum JWAdClient)client;
/// Skips the currently playing ad.
/// note:
/// If a skip offset is configured for the currently playing ad, calling <code>skipAd()</code> will have no effect unless the skip offset is reached.
- (void)skipAd;
/// Performs a clickthrough on the current advertisement using the default browser.
/// note:
/// Does nothing if no ad clickthrough URL is available or no ad is playing.
/// note:
/// Only available for JWPlayer ads, a warning will be thrown if it is used for other ad clients.
- (void)openAdClickthrough;
/// Returns the state of the player.
///
/// returns:
/// A constant denoting the state of the player. If it cannot determine the state, <code>.unknown</code> is returned.
- (enum JWPlayerState)getState SWIFT_WARN_UNUSED_RESULT;
/// Sets the new playlist to the player using its URL.
/// \param url The URL of the playlist for the player to load.
///
- (void)loadPlaylistWithUrl:(NSURL * _Nonnull)url;
/// Sets the new playlist to the player
/// \param playlist List of content to be played.
///
- (void)loadPlaylistWithItems:(NSArray<JWPlayerItem *> * _Nonnull)items;
/// Sets the new playlist to the player
/// \param playlist List of content to be played.
///
- (void)loadPlaylist:(NSArray<JWPlayerItem *> * _Nonnull)playlist SWIFT_DEPRECATED_MSG("", "playlist(items:)");
/// Loads a player item within the current playlist.
/// \param index The index of the desired item within the playlist. If the index is invalid, this method does nothing.
///
- (void)loadPlayerItemAtIndex:(NSInteger)index;
/// A description of the currently playing item.
@property (nonatomic, readonly, strong) JWPlayerItem * _Nullable currentItem;
/// Returns the cues associated with the currently loaded content.
/// note:
/// This should only be called after receiving an onPlaylistItem event. When an onPlaylistItem event fires, the last set of cues are removed.
///
/// returns:
/// An array of Cues.
- (NSArray<JWCue *> * _Nonnull)getCues SWIFT_WARN_UNUSED_RESULT;
/// Sets the cues associated with the currently loaded content.
/// note:
/// This should only be called after receiving an onPlaylistItem event. When an onPlaylistItem event fires, the last set of cues are removed.
/// \param cues An array of Cues.
///
- (void)setCues:(NSArray<JWCue *> * _Nonnull)cues;
/// Adds cues to the list of existing cues associated with the currently loaded content.
/// note:
/// This should only be called after receiving an onPlaylistItem event. When an onPlaylistItem event fires, the last set of cues are removed.
/// \param cues An array of Cues.
///
- (void)addCues:(NSArray<JWCue *> * _Nonnull)cues;
/// Set the captions the index of the currently active captions track. A value of -1 means there is no captions track will be in use.
/// <ul>
///   <li>
///     parameters index: The caption index to be set.
///   </li>
/// </ul>
///
/// throws:
/// If an error is encountered, a JWError is thrown.
- (BOOL)setCaptionTrackWithIndex:(NSInteger)index error:(NSError * _Nullable * _Nullable)error;
/// Set the captions track by its locale. If the locale for this track does not exist, this throws a warning. If the locale is set to <code>nil</code> then no captions track will be used.
/// <ul>
///   <li>
///     parameters locale: The caption locale to be set.
///   </li>
/// </ul>
///
/// throws:
/// If an error is encountered, a JWError is thrown.
- (BOOL)setCaptionTrackWithLocale:(NSString * _Nullable)locale error:(NSError * _Nullable * _Nullable)error;
/// Sets player’s caption rendering behavior. If <code>true</code>, captions will not be rendered by the player.
/// If a caption track has been chosen, and this flag is set to <code>true</code>, caption events will still be reported to the <code>JWAVDelegate</code>.
/// note:
/// The default value is <code>false</code>.
@property (nonatomic) BOOL suppressesCaptionRendering;
/// The index of the currently active captions track. A value of -1 means there is no captions track in use.
@property (nonatomic) NSInteger currentCaptionsTrack;
/// Returns an array of objects based on available captions. Information for each object may vary depending on the caption types.
/// The caption tracks are in a predetermined order.
/// <ul>
///   <li>
///     The first item in the array is alway <code>None</code>, for disabling captions.
///   </li>
///   <li>
///     Embedded captions come second, in an order denoted by the HLS manifest.
///   </li>
///   <li>
///     Side-loaded captions are last in the array, in the same order as added to the config.
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSArray<JWMediaSelectionOption *> * _Nonnull captionsTracks;
/// The index of the currently active audio track.
@property (nonatomic) NSInteger currentAudioTrack;
/// Returns an array of the playable audio tracks of the current asset in the player.
@property (nonatomic, readonly, copy) NSArray<JWMediaSelectionOption *> * _Nonnull audioTracks;
/// The current visual quality, expressed as an index into the visual quality levels array.
@property (nonatomic) NSInteger currentVisualQuality;
/// Returns an array of the playable visual quality levels of the current asset in the player.
@property (nonatomic, readonly, copy) NSArray<JWVideoSource *> * _Nonnull visualQualityLevels;
/// The current visual quality source.
@property (nonatomic, readonly, strong) JWVisualQuality * _Nullable visualQuality;
/// A data source delegate which requests the necessary keys to decrypt protected content.
@property (nonatomic, strong) id <JWDRMContentKeyDataSource> _Nullable contentKeyDataSource;
/// The DRM content loader used for loading locally stored protected content.
/// This content loader is used to evaluate DRM-protected content. If this is not set, and the <code>contentDataSource</code> property
/// is set instead, this property will be populated automatically when <code>configurePlayer(with:)</code> is called.
/// note:
/// If this property is set, the <code>contentKeyDataSource</code> property should remain <code>nil</code>.
@property (nonatomic, strong) JWDRMContentLoader * _Nullable contentLoader;
/// An interface to  add/remove friendly obstructions
@property (nonatomic, readonly, strong) id <JWFriendlyObstructionManager> _Nonnull friendlyObstructions;
@end

@protocol JWPlayerDelegate;
@protocol JWPlayerStateDelegate;

/// This is the public interface into the JWPlayer instance.
SWIFT_PROTOCOL("_TtP11JWPlayerKit8JWPlayer_")
@protocol JWPlayer <JWPlayerProtocol>
/// The delegate to notify about setup errors, warnings, and success when configuring the player.
/// note:
/// Set this property before configuring the player in order to receive errors during configuration.
@property (nonatomic, strong) id <JWPlayerDelegate> _Nullable delegate;
/// A delegate which listens for changes in the player’s state.
@property (nonatomic, strong) id <JWPlayerStateDelegate> _Nullable playbackStateDelegate;
/// A delegate which listens for ads events.
@property (nonatomic, strong) id <JWAdDelegate> _Nullable adDelegate;
/// A delegate which listens for events for video quality, captions, and audio.
@property (nonatomic, strong) id <JWAVDelegate> _Nullable avDelegate;
/// A delegate which listens for AirPlay events.
@property (nonatomic, strong) id <JWAirPlayDelegate> _Nullable airPlayDelegate;
/// This closure is called during all ad time events. The current position and duration of the current ad content is supplied as an argument.
@property (nonatomic, copy) void (^ _Nullable adTimeObserver)(JWTimeData * _Nonnull);
/// This closure is called during all media playback time events. The current position and duration of the current media content is supplied as an argument.
@property (nonatomic, copy) void (^ _Nullable mediaTimeObserver)(JWTimeData * _Nonnull);
/// Delegates that surface different types of metadata from the player.
@property (nonatomic, readonly, strong) JWMetadataDelegates * _Nonnull metadataDelegates;
@end


/// A description of an ad impression from the JW Player Ad Client.
SWIFT_CLASS("_TtC11JWPlayerKit20JWPlayerAdImpression")
@interface JWPlayerAdImpression : JWAdImpression
/// An array of the AdSystems specified in any utilized ad wrappers; index denotes level of wrapper.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull wrappers;
/// The version of VAST specified in the VAST XML.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified vastVersion;
/// URL of the currently playing media file
@property (nonatomic, readonly, copy) NSURL * _Null_unspecified mediaFile;
@end


/// Configuration object used to create a <code>JWPlayer</code> instance.
SWIFT_CLASS("_TtC11JWPlayerKit21JWPlayerConfiguration")
@interface JWPlayerConfiguration : NSObject
/// Init declared as internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class JWRelatedContentConfiguration;
enum JWPreload : NSInteger;

/// Used to build a <code>JWPlayerConfiguration</code> object to configure instance(s) of <code>JWPlayer</code>.
SWIFT_CLASS("_TtC11JWPlayerKit28JWPlayerConfigurationBuilder")
@interface JWPlayerConfigurationBuilder : NSObject
/// Builds player config based off the settings provided.
/// <ul>
///   <li>
///     throws An error if the config is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWPlayerConfiguration</code> object.
///   </li>
/// </ul>
- (JWPlayerConfiguration * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets an array of <code>JWPlayerItem</code> objects containing information about different media items to be reproduced in a sequence.
/// seealso:
/// <code>JWPlayerItem</code>
/// \param items An array of <code>JWPlayerItem</code> objects containing information about different media items to be reproduced in a sequence.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerConfigurationBuilder * _Nonnull)playlistWithItems:(NSArray<JWPlayerItem *> * _Nonnull)items;
/// Sets an array of <code>JWPlayerItem</code> objects containing information about different media items to be reproduced in a sequence.
/// seealso:
/// <code>JWPlayerItem</code>
/// \param playlist An array of <code>JWPlayerItem</code> objects containing information about different media items to be reproduced in a sequence.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerConfigurationBuilder * _Nonnull)playlist:(NSArray<JWPlayerItem *> * _Nonnull)playlist SWIFT_DEPRECATED_MSG("", "playlistWithItems:");
/// Sets the playlist content url using a URL.
/// note:
/// If a playlist array is also set using <code>playlist()</code>, calling <code>build()</code> will throw an exception.
/// \param url The URL of the playlist content.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerConfigurationBuilder * _Nonnull)playlistWithUrl:(NSURL * _Nonnull)url;
/// Sets the settings that control the behavior of ads.
/// seealso:
/// <code>JWAdvertisingConfig</code>
/// \param advertising Information about ad behavior.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerConfigurationBuilder * _Nonnull)advertising:(JWAdvertisingConfig * _Nonnull)advertising;
/// Sets the settings for related content.
/// seealso:
/// <code>JWRelatedConfig</code>
/// \param related Settings for related content.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerConfigurationBuilder * _Nonnull)related:(JWRelatedContentConfiguration * _Nonnull)related;
/// Sets whether or not a video should start automatically after loading. The default value is <code>false</code>.
/// \param autostart Whether or not a video should start automatically after loading.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerConfigurationBuilder * _Nonnull)autostart:(BOOL)autostart;
/// Sets whether or not content should be loaded prior to playback. The default value is <code>JWPreload.auto</code>.
/// note:
/// <code>JWPreload.auto</code> loads the manifest before playback is requested.
/// note:
/// <code>JWPreload.none</code> doesn’t preload content. We recommend this if you are concerned about excess content usage.
/// \param preload Whether or not the content should be loaded prior to playback.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerConfigurationBuilder * _Nonnull)preload:(enum JWPreload)preload;
/// Sets the maximum bitrate that can be reached during automatic quality switching. Useful for limiting bandwidth consumption by viewers.
/// note:
/// If network bandwith usage cannot be reduced to meet the bitrateUpperBound, it will be lowered as much as possible while continuing playback.
/// \param bitrateUpperBound The maximum bitrate that can be reached during automatic quality switching.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerConfigurationBuilder * _Nonnull)bitrateUpperBound:(float)bitrateUpperBound;
/// Sets whether or not content should repeat after it’s done playing. The default value is <code>false</code>.
/// \param repeatContent Whether or not content should repeat after it’s done playing.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerConfigurationBuilder * _Nonnull)repeatContent:(BOOL)repeatContent;
/// Sets an array of metadata that can be passed externally to supplement the encoded metadata of the underlying media asset.
/// note:
/// Applies to all playlist items that do not specify their own external metadata.
/// note:
/// Capped at 5 metadata instances; the instances in excess will be excluded.
/// seealso:
/// <code>JWExternalMetadata</code>
/// \param externalMetadata An array of metadata to apply.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerConfigurationBuilder * _Nonnull)externalMetadata:(NSArray<JWExternalMetadata *> * _Nonnull)externalMetadata;
/// Defines what ad tracking library to use for analytics.
/// <ul>
///   <li>
///     returns The builder, so setters can be chained.
///   </li>
/// </ul>
/// \param tracker A config for the desired ad tracker.
///
- (JWPlayerConfigurationBuilder * _Nonnull)adTracker:(JWAdTrackerConfig * _Nonnull)tracker SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Defines what settings to use during external playback.
/// <ul>
///   <li>
///     returns The builder, so setters can be chained.
///   </li>
/// </ul>
/// \param settings The settings object defining external playback behavior.
///
- (JWPlayerConfigurationBuilder * _Nonnull)externalPlaybackSettings:(JWExternalPlaybackSettings * _Nonnull)settings;
/// Allows a configuration to be created using a natively-defined JSONObject.
/// warning:
/// If this method is called, it will override any parameters set using other methods in this builder. Calling <code>configuration(json: Data)</code> will throw an error when <code>build()</code> is called.
/// <ul>
///   <li>
///     returns The builder, so setters can be chained.
///   </li>
/// </ul>
/// \param json The dictionary defining the configuration.
///
- (JWPlayerConfigurationBuilder * _Nonnull)configurationWithJson:(NSDictionary<NSString *, id> * _Nonnull)json;
/// Allows a configuration to be created using a data blob containing JSON. If the supplied data cannot be converted into JSON, or the JSON in the data is not formatted correctly, the <code>build()</code> method will throw an error.
/// warning:
/// If this method is called, it will override any parameters set using other methods in this builder. Calling <code>configuration(json: JSONObject)</code> will throw an error when <code>build()</code> is called.
/// <ul>
///   <li>
///     returns The builder, so setters can be chained.
///   </li>
/// </ul>
/// \param data The JSON data defining the configuration.
///
- (JWPlayerConfigurationBuilder * _Nonnull)configurationWithData:(NSData * _Nonnull)data;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol which must be used to monitor errors within the JWPlayer instance.
SWIFT_PROTOCOL("_TtP11JWPlayerKit16JWPlayerDelegate_")
@protocol JWPlayerDelegate
/// When the player is fully initialized, this method is called on the delegate.
/// \param player The player which initialized successfully.
///
- (void)jwplayerIsReady:(id <JWPlayer> _Nonnull)player;
/// When the player encounters an error with playback, this method is called on the delegate.
/// \param player The player generating the error.
///
/// \param code The numerical code representing the error.
///
/// \param message A human-readable description of the error.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player failedWithError:(NSUInteger)code message:(NSString * _Nonnull)message;
/// When the player encounters an error during setup and initialization, this method is called on the delegate.
/// \param player The player generating the error.
///
/// \param code The numerical code representing the error.
///
/// \param message A human-readable description of the error.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player failedWithSetupError:(NSUInteger)code message:(NSString * _Nonnull)message;
/// When the player encounters a warning within the SDK, this method is called on the delegate.
/// \param player The player generating the error.
///
/// \param code The numerical code representing the warning.
///
/// \param message A human-readable description of the warning.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player encounteredWarning:(NSUInteger)code message:(NSString * _Nonnull)message;
/// When the player encounters an ad warning within the SDK, this method is called on the delegate. Ad warnings do not prevent the ad from continuing to play.
/// \param player The player generating the warning.
///
/// \param code The numerical code representing the ad warning.
///
/// \param message A human-readable description of the warning.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player encounteredAdWarning:(NSUInteger)code message:(NSString * _Nonnull)message;
/// When the player encounters an ad error within the SDK, this method is called on the delegate. Ad errors prevent ads from playing, but do not prevent media playback from continuing.
/// \param player The player generating the error.
///
/// \param code The numerical code representing the ad error.
///
/// \param message A human-readable description of the error.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player encounteredAdError:(NSUInteger)code message:(NSString * _Nonnull)message;
@end


/// Defines a player item which contains the information about the media content.
SWIFT_CLASS("_TtC11JWPlayerKit12JWPlayerItem")
@interface JWPlayerItem : NSObject
/// Title of the player item.
@property (nonatomic, readonly, copy) NSString * _Nullable title;
/// Short description of the player item.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Poster image url of the player item.
@property (nonatomic, readonly, copy) NSURL * _Nullable posterImage;
/// Number of seconds from the start of a media asset when playback should begin.
@property (nonatomic, readonly) NSTimeInterval startTime;
/// The player item’s media identifier.
@property (nonatomic, readonly, copy) NSString * _Nullable mediaId;
/// URL to a feed that contains related items for a particular player item.
@property (nonatomic, readonly, copy) NSURL * _Nullable recommendations;
/// Determines whether media should start automatically after loading. The default value is <code>false</code>.
@property (nonatomic, readonly) BOOL autostart SWIFT_DEPRECATED_MSG("Instead read from JWPlayerConfiguration.autostart");
/// An array of <code>JWVideoSource</code> objects representing multiple quality levels of a video.
/// seealso:
/// <code>JWVideoSource</code>
@property (nonatomic, readonly, copy) NSArray<JWVideoSource *> * _Null_unspecified videoSources;
/// An array of <code>JWMediaTrack</code> objects providing captions for different languages or thumbnails images.
/// seealso:
/// <code>JWMediaTrack</code>
@property (nonatomic, readonly, copy) NSArray<JWMediaTrack *> * _Nullable mediaTracks;
/// The URL of the VMAP file to load.
/// note:
/// Used for JW and IMA.
@property (nonatomic, readonly, copy) NSURL * _Nullable vmapURL;
/// An array of <code>JWAdBreak</code> objects that provide info about ad breaks.
/// seealso:
/// <code>JWAdBreak</code>
@property (nonatomic, readonly, copy) NSArray<JWAdBreak *> * _Nullable adSchedule;
/// A <code>JWGoogleDAIStream</code> object that provides info about either a VoD or Live stream.
/// seealso:
/// <code>JWGoogleDAIStream</code>
@property (nonatomic, readonly, strong) JWGoogleDAIStream * _Nullable googleDAIStream;
/// A dictionary that contains options used to customize the initialization of the asset.
/// note:
/// For more information, refer to <a href="https://developer.apple.com/documentation/avfoundation/avurlasset/initialization_options">Initialization Options</a>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nullable assetOptions;
/// Array of metadata that an be passed externally to supplement the encoded metadata of the underlying media asset.
/// note:
/// Supersedes the external metadata specified in the <code>JWPlayerConfiguration</code>, for this player item.
/// note:
/// Capped at 5 metadata instances; the instances in excess will be excluded.
/// seealso:
/// <code>JWExternalMetadata</code>
@property (nonatomic, readonly, copy) NSArray<JWExternalMetadata *> * _Nullable externalMetadata;
/// This init is internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Overridden to check quickly and accurately if two player items are the same.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end



/// The builder for JWPlayerItem, ensuring it is built correctly.
SWIFT_CLASS("_TtC11JWPlayerKit19JWPlayerItemBuilder")
@interface JWPlayerItemBuilder : NSObject
/// Builds a JWPlayerItem modeled after the specified parameters.
///
/// throws:
/// <code>JWError with key propertyNotSet</code> If at least one video source is not specified.
/// <code>JWError with key ambiguousVideoSources</code> If both a file and a video source are specified.
///
/// returns:
/// A JWPlayerItem object with the provided parameters.
- (JWPlayerItem * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets a single video source for the player item by providing an URL.
/// \param file A String to display as title.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)file:(NSURL * _Nonnull)file;
/// Sets the title of the player item.
/// note:
/// The string provided is displayed as a literal, and is not looked up in a localized string table.
/// \param title A String to display as title.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)title:(NSString * _Nonnull)title;
/// Sets the description of the player item.
/// note:
/// The string provided is displayed as a literal, and is not looked up in a localized string table.
/// \param description A String to display as description.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)description:(NSString * _Nonnull)description;
/// Sets the poster image url of the player item.
/// \param posterImage An URL that points to the poster image.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)posterImage:(NSURL * _Nonnull)posterImage;
/// Sets the number of seconds from the start of a media asset when playback should begin.
/// \param startTime A TimeInterval value in seconds that determines the start of a media asset when playback should begin.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)startTime:(NSTimeInterval)startTime;
/// Sets the media identifier of the player item.
/// \param mediaId A String that represents the player item’s media identifier.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)mediaId:(NSString * _Nonnull)mediaId;
/// Sets the recommendations feed url that contains related items for a particular player item.
/// \param recommendations An URL that represent the player item’s recommendations feed.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)recommendations:(NSURL * _Nonnull)recommendations;
/// Sets the flag to start playng the player item automatically.
/// \param autostart A Boolean that determines whether player item should start automatically after loading.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)autostart:(BOOL)autostart SWIFT_DEPRECATED_MSG("Instead use JWPlayerConfigurationBuilder.autostart");
/// Sets the video sources which represent the quality levels of the player item.
/// \param videoSources An array of <code>JWVideoSource</code> objects representing multiple quality levels of a video.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)videoSources:(NSArray<JWVideoSource *> * _Nonnull)videoSources;
/// Sets the media tracks which provide captions for different languages or thumbnails images of the player item.
/// \param mediaTracks An array of <code>JWMediaTrack</code> objects providing captions for different languages or thumbnails images.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)mediaTracks:(NSArray<JWMediaTrack *> * _Nonnull)mediaTracks;
/// Sets a VMAP URL.
/// \param vmapURL Either a local or remote URL of the vmap file.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)adScheduleWithVmapURL:(NSURL * _Nonnull)vmapURL;
/// Sets the advertising schedule which represents a point in the player item time to play the ad.
/// \param breaks An array of <code>JWAdBreak</code> objects providing captions for different languages or thumbnail images.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)adScheduleWithBreaks:(NSArray<JWAdBreak *> * _Nonnull)breaks;
/// Sets URL asset .
/// note:
/// To see available options, refer to <a href="https://developer.apple.com/documentation/avfoundation/avurlasset/initialization_options">Initialization Options</a>
/// \param assetOptions A Dictionary of  URLAsset initialization options.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)assetOptions:(NSDictionary<NSString *, id> * _Nonnull)assetOptions;
/// Sets the Google DAI info which contains either a VoD or Live stream.
/// \param googleDAIStream A <code>JWGoogleDAIStream</code> object that provide info about either VoD or Live stream.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)googleDAIStream:(JWGoogleDAIStream * _Nonnull)googleDAIStream;
/// Sets an array of metadata that can be passed externally to supplement the encoded metadata of the underlying media asset.
/// note:
/// Supersedes the external metadata specified in the <code>JWPlayerConfiguration</code>, for this player item.
/// note:
/// Capped at 5 metadata instances; the instances in excess will be excluded.
/// seealso:
/// <code>JWExternalMetadata</code>
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerItemBuilder * _Nonnull)externalMetadata:(NSArray<JWExternalMetadata *> * _Nonnull)externalMetadata;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// JWPlayerKitLicense is a static interface into our SDK for accomplishing basic tasks outside of a JWPlayer instance.
SWIFT_CLASS("_TtC11JWPlayerKit18JWPlayerKitLicense")
@interface JWPlayerKitLicense : NSObject
/// Sets the license key associated with the SDK. All JWPlayer instances will use this key for authentication.
+ (void)setLicenseKey:(NSString * _Nonnull)clientKey;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Defines a player item which contains the information about the media content.
SWIFT_CLASS("_TtC11JWPlayerKit12JWPlayerSkin")
@interface JWPlayerSkin : NSObject
/// This init is internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class JWTimeSliderStyle;

/// The builder for JWPlayerSkin.
SWIFT_CLASS("_TtC11JWPlayerKit19JWPlayerSkinBuilder")
@interface JWPlayerSkinBuilder : NSObject
/// Builds a <code>JWPlayerSkin</code> structure for use in interface styling.
/// <ul>
///   <li>
///     throws An error if the style is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWPlayerSkin</code> object.
///   </li>
/// </ul>
- (JWPlayerSkin * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the style for the slider bar.
/// \param timeSliderStyle The style to set on the slider bar.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)timeSliderStyle:(JWTimeSliderStyle * _Nonnull)timeSliderStyle;
/// Sets the style for the menu.
/// \param menuStyle The style for the menu.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)menuStyle:(JWMenuStyle * _Nonnull)menuStyle;
/// Sets the style for the captions.
/// \param captionStyle The desired style to apply to the captions.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)captionStyle:(JWCaptionStyle * _Nonnull)captionStyle;
/// Sets the default color of the background of the player.
/// \param backgroundColor The color to be set on the background of the player.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)backgroundColor:(UIColor * _Nonnull)backgroundColor;
/// Sets the default font color for the player.
/// note:
/// It is used if a font color isn’t specified elsewhere.
/// \param fontColor The color for the text on the player.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)fontColor:(UIColor * _Nonnull)fontColor;
/// Sets the default font for the player.
/// note:
/// It is used if a font isn’t specified elsewhere.
/// \param font default font for the player.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)font:(UIFont * _Nonnull)font;
/// Sets the default color for play, next and previous buttons on the interface.
/// \param buttonsColor The color for the buttons on the interface.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)buttonsColor:(UIColor * _Nonnull)buttonsColor;
/// Sets whether or not the <em>title</em> should be displayed on the interface. The default value is <code>true</code>.
/// \param titleIsVisible A boolean that indicates whether or not the <em>title</em> should be displayed.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)titleIsVisible:(BOOL)titleIsVisible;
/// Sets whether or not the <em>description</em> should be displayed on the interface. The default value is <code>true</code>.
/// \param descriptionIsVisible A boolean that indicates whether or not the <em>description</em> should be displayed.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)descriptionIsVisible:(BOOL)descriptionIsVisible;
/// Sets the default for ad cues in the control bar.
/// \param color The desired color for the cue markers.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)adCueColor:(UIColor * _Nonnull)color;
/// Sets the default for chapter cues in the control bar.
/// \param color The desired color for the cue markers.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWPlayerSkinBuilder * _Nonnull)chapterCueColor:(UIColor * _Nonnull)color;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Constants indicating the state of the player.
typedef SWIFT_ENUM(NSInteger, JWPlayerState, open) {
/// Player cannot determine the state
  JWPlayerStateUnknown = 0,
/// Player is currently idle.
  JWPlayerStateIdle = 1,
/// Player is currently buffering.
  JWPlayerStateBuffering = 2,
/// Player is currently playing.
  JWPlayerStatePlaying = 3,
/// Player is currently paused.
  JWPlayerStatePaused = 4,
/// Player has completed playback of content.
  JWPlayerStateComplete = 5,
/// Player has encountered an unrecoverable error.
  JWPlayerStateError = 6,
};


/// This delegate reports events based on the player’s state.
/// <h1>Play Events</h1>
/// A handful of different events are reported when a play event is happening. These events happen in this order:
/// <ul>
///   <li>
///     isAttemptingToPlay
///   </li>
///   <li>
///     willPlayWithReason
///   </li>
///   <li>
///     isPlayingWithReason
///   </li>
/// </ul>
SWIFT_PROTOCOL("_TtP11JWPlayerKit21JWPlayerStateDelegate_")
@protocol JWPlayerStateDelegate
/// Reports when the content is about to complete.
/// note:
/// Analagous to the <code>onBeforeComplete</code> event in version 3.x.
/// \param player The player emitting the event.
///
- (void)jwplayerContentWillComplete:(id <JWPlayer> _Nonnull)player;
/// Reports when the content will begin playing.
/// note:
/// Analagous to the <code>onBeforePlay</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param reason The reason play will begin.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player willPlayWithReason:(enum JWPlayReason)reason;
/// Reports when the player is buffering.
/// \param player The player that is buffering.
///
/// \param reason The reason the player is buffering.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player isBufferingWithReason:(enum JWBufferReason)reason;
/// Reports when the content is buffering.
/// note:
/// Analagous to the <code>onBuffer</code> event in version 3.x.
/// \param player The player emitting the event.
///
- (void)jwplayerContentIsBuffering:(id <JWPlayer> _Nonnull)player;
/// Reports when additional data has been added to the buffer.
/// note:
/// Analagous to the <code>onBufferChange</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param percent Percentage of the media which is currently buffered.
///
/// \param time The current position in the media file.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player updatedBuffer:(double)percent position:(JWTimeData * _Nonnull)time;
/// Reports when the content is complete.
/// note:
/// Analagous to the <code>onComplete</code> event in version 3.x.
/// \param player The player emitting the event.
///
- (void)jwplayerContentDidComplete:(id <JWPlayer> _Nonnull)player;
/// Reports when the content has finished loading.
/// note:
/// Analagous to the <code>onFirstFrame</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param loadTime The amount of time (in seconds) it took for the player to transition from a play attempt to a firstFrame event.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didFinishLoadingWithTime:(NSTimeInterval)loadTime;
/// Reports when the content has begun playing.
/// note:
/// Analagous to the <code>onPlay</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param reason The reason play has begun.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player isPlayingWithReason:(enum JWPlayReason)reason;
/// Reports when the player is about to play content.
/// note:
/// Analagous to the <code>onPlayAttempt</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param playlistItem A description of the playlist item attempting to be played.
///
/// \param reason The reason the player is attempting to play the given item.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player isAttemptingToPlay:(JWPlayerItem * _Nonnull)playlistItem reason:(enum JWPlayReason)reason;
/// Reports when the content has paused.
/// note:
/// Analagous to the <code>onPause</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param reason The reason the player became paused.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didPauseWithReason:(enum JWPauseReason)reason;
/// Reports when the content has become idle and is awaiting a new state or command.
/// note:
/// Analagous to the <code>onIdle</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param reason The reason the player became idle.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didBecomeIdleWithReason:(enum JWIdleReason)reason;
/// Reports when the player has become visible or not visible.
/// When the player is 50% or more on the screen, it is reported as visible. If it is less, the player is reported as not visible. This event only reports when this status has changed.
/// note:
/// Analagous to the <code>onViewable</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param isVisible True, if the player is visible. False if it is not.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player isVisible:(BOOL)isVisible;
/// Reports when a new playlist has been loaded into the player.
/// note:
/// Analagous to the <code>onPlaylist</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param playlist An array of playlist items in the playlist, in playlist order.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didLoadPlaylist:(NSArray<JWPlayerItem *> * _Nonnull)playlist;
/// Reports when a new playlist has been loaded into the player.
/// note:
/// Analagous to the <code>onPlaylistItem</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param item The playlist item that has been loaded into the player.
///
/// \param index The index the playlist item in the playlist.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didLoadPlaylistItem:(JWPlayerItem * _Nonnull)item at:(NSUInteger)index;
/// Reports when the entirety of the current playlist has finished playing.
/// note:
/// Analagous to the <code>onPlaylistComplete</code> event in version 3.x.
/// \param player The player emitting the event.
///
- (void)jwplayerPlaylistHasCompleted:(id <JWPlayer> _Nonnull)player;
/// Reports when type of media has been loaded.
/// \param player The player emitting the event.
///
/// \param type The type of media content being played.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player usesMediaType:(enum JWMediaType)type;
/// Reports when content playback resumes after seeking.
/// note:
/// Analagous to the <code>onSeeked</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param oldPosition The position, in seconds, when seeking began.
///
/// \param newPosition The position, in seconds, requested to be seeked to.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player seekedFrom:(NSTimeInterval)oldPosition to:(NSTimeInterval)newPosition;
/// Reports when content playback resumes after seeking.
/// note:
/// Analagous to the <code>onSeeked</code> event in version 3.x.
/// \param player The player emitting the event.
///
- (void)jwplayerHasSeeked:(id <JWPlayer> _Nonnull)player;
/// Reports a change in the playback rate.
/// This method reports when the playback rate has changed, excluding when the rate has changed due to play beginning, or pausing. To listen for state changes in the player, such as play or pause, conform to the <code>JWPlaybackStateDelegate</code>
/// note:
/// Analagous to the <code>onPlaybackRateChanged</code> event in version 3.x.
/// \param player The player emitting the event.
///
/// \param rate The new playback rate.
///
/// \param time The position in the content, expressed in seconds, at which the playback rate changed.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player playbackRateChangedTo:(double)rate at:(NSTimeInterval)time;
/// Reports when the cue points have been updated.
/// \param player The player emitting the event.
///
/// \param cues The new list of cues.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player updatedCues:(NSArray<JWCue *> * _Nonnull)cues;
@end

@class AVPictureInPictureController;
enum JWVideoGravity : NSInteger;

/// Methods and properties for interfacing with the view of  a <code>JWPlayer</code> instance.
SWIFT_PROTOCOL("_TtP11JWPlayerKit20JWPlayerViewProtocol_")
@protocol JWPlayerViewProtocol
/// The currently defined style for captions. If nil, it reverts to default settings as specified within the SDK or the user’s accessibility settings.
@property (nonatomic, strong) JWCaptionStyle * _Nullable captionStyle;
/// The amount of spaced to inset the captions from the edges of the player. The default value is 0.
@property (nonatomic) UIEdgeInsets captionInsets;
/// The picture in picture controller for the player.
/// note:
/// Picture in picture works in iOS 14 and above for iPhones, and iOS 13 and above for iPads.
@property (nonatomic, readonly, strong) AVPictureInPictureController * _Nullable pictureInPictureController;
/// How to display video content within the bounds of a view.
@property (nonatomic) enum JWVideoGravity videoGravity;
/// Determines if the player view allows Picture in Picture playback.
/// note:
/// The default value is <code>true</code>.
/// attention:
/// <code>canStartPictureInPictureAutomaticallyFromInline</code> is not set to <code>true</code> when enabling this property, Picture in Picture mode should only be initiated when using a dedicated UI button.
@property (nonatomic) BOOL allowsPictureInPicturePlayback;
/// Returns the region where the video is being rendered.
@property (nonatomic, readonly) CGRect videoRect;
@end

@protocol JWPlayerViewDelegate;

/// A view for displaying a player. It automatically handles enlarging the player to the size of this container view, and displaying the player.
SWIFT_CLASS("_TtC11JWPlayerKit12JWPlayerView")
@interface JWPlayerView : UIView <JWPlayerViewProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
/// The player associated with the view.
@property (nonatomic, readonly, strong) id <JWPlayer> _Nonnull player;
/// The delegate which will receive events related to the JWPlayerView.
@property (nonatomic, weak) id <JWPlayerViewDelegate> _Nullable delegate;
@property (nonatomic) BOOL allowsPictureInPicturePlayback;
/// The currently defined style for captions. If nil, it reverts to default settings as specified within the SDK or the user’s accessibility settings.
@property (nonatomic, strong) JWCaptionStyle * _Nullable captionStyle;
/// The amount of spaced to inset the captions from the edges of the player. The default value is 0.
@property (nonatomic) UIEdgeInsets captionInsets;
@property (nonatomic, readonly) CGRect videoRect;
/// The picture in picture controller for the player.
/// note:
/// Picture in picture works in iOS 14 and above for iPhones, and iOS 13 and above for iPads.
@property (nonatomic, readonly, strong) AVPictureInPictureController * _Nullable pictureInPictureController;
/// Indicates how to display the video content within the bounds of the view.  The default value is <code>resizeAspect</code>.
@property (nonatomic) enum JWVideoGravity videoGravity;
/// Initializes and returns a newly allocated view object with the specified frame rectangle.
/// \param frame The frame rectangle for the view.
///
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToWindow;
/// This init is required, so it is here.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
/// Lays out subviews.
- (void)layoutSubviews;
@end





/// A protocol for listening to time events through the JWPlayerViewController.
SWIFT_PROTOCOL("_TtP11JWPlayerKit19JWTimeEventListener_")
@protocol JWTimeEventListener
/// This callback is triggered when a time event fires for the media.
/// When this is triggered, both a duration and position are supplied. This event does not fire when an ad is playing. If you are overriding this method, you must call the super method.
/// \param time The position and duration of the currently playing media.
///
- (void)onMediaTimeEvent:(JWTimeData * _Nonnull)time;
/// This callback is triggered when a time event fires for a currently playing ad.
/// When this is triggered, both a duration and position within the ad are supplied. This event only fires when an ad is playing. If you are overriding this method, you must call the super method.
/// \param time The position and duration of the currently playing ad.
///
- (void)onAdTimeEvent:(JWTimeData * _Nonnull)time;
@end

@class JWProgramDateTimeMetadata;

/// Listens for program-date-time metadata events during playback.
SWIFT_PROTOCOL("_TtP11JWPlayerKit33JWProgramDateTimeMetadataDelegate_")
@protocol JWProgramDateTimeMetadataDelegate
/// Triggered once the metadata cue point is buffered.
/// \param player The player that parsed the program-date-time cue.
///
/// \param metadata Contains information about the program-date-time cue.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player programDateTimeMetadataCueParsed:(JWProgramDateTimeMetadata * _Nonnull)metadata;
/// Triggered when playback enters the time range where new metadata becomes active.
/// \param player The player that triggered the program-date-time event.
///
/// \param metadata Contains information about the active program-date-time metadata.
///
- (void)jwplayer:(id <JWPlayer> _Nonnull)player programDateTimeMetadata:(JWProgramDateTimeMetadata * _Nonnull)metadata;
@end


/// A delegate for receiving information on changes to the JWPlayerView.
SWIFT_PROTOCOL("_TtP11JWPlayerKit20JWPlayerViewDelegate_")
@protocol JWPlayerViewDelegate
/// Called when the player’s dimensions have changed.
/// \param view The JWPlayerView emitting the resize event.
///
/// \param oldSize The previous size of the player.
///
/// \param newSize The new size of the player on the screen.
///
- (void)playerView:(JWPlayerView * _Nonnull)view sizeChangedFrom:(CGSize)oldSize to:(CGSize)newSize;
@end

@protocol JWPlayerViewControllerDelegate;

/// This ViewController creates a <code>JWPlayerView</code>, and creates a default interface for the content.
/// If you are using <code>JWPlayerViewController</code>, do not assign another class as a delegate for <code>JWPlayerView</code> or <code>JWPlayer</code> and its related delegate properties, nor for <code>JWPlayer.adTimeObserver</code> and <code>JWPlayer.mediaTimeObserver</code>. This controller conforms to these delegates already. You can gain access to events by subclassing this, and overriding the methods you are interested in.
/// note:
/// If you are writing in Objective-C and want to subclass this ViewController, refer to <code>JWPlayerObjViewController</code> and subclass that instead.
SWIFT_CLASS("_TtC11JWPlayerKit22JWPlayerViewController")
@interface JWPlayerViewController : UIViewController <AVPictureInPictureControllerDelegate, JWAVDelegate, JWAccessLogMetadataDelegate, JWAdDelegate, JWAirPlayDelegate, JWCastDelegate, JWDateRangeMetadataDelegate, JWExternalMetadataDelegate, JWID3MetadataDelegate, JWMediaMetadataDelegate, JWPlayerDelegate, JWPlayerStateDelegate, JWPlayerViewDelegate, JWProgramDateTimeMetadataDelegate, JWTimeEventListener, UIPopoverPresentationControllerDelegate>
/// A Boolean value that determines whether the player view allows Picture in Picture playback.
/// note:
/// The default value is <code>true</code>.
/// attention:
/// <code>canStartPictureInPictureAutomaticallyFromInline</code> is not set to true when enabling this property, Picture-in-Picture mode should only be expected to be initiated when using the UI button designated for this.
@property (nonatomic) BOOL allowsPictureInPicturePlayback;
/// The delegate to receive JWPlayerViewController events.
@property (nonatomic, weak) id <JWPlayerViewControllerDelegate> _Nullable delegate;
/// Returns true if the player is currently in fullscreen mode, and false if it is not
@property (nonatomic, readonly) BOOL isFullScreen;
/// The view containing the player.
@property (nonatomic, readonly, strong) id <JWPlayerViewProtocol> _Nonnull playerView;
/// The behavior desired for the interface. The default value is <code>.normal</code>.
@property (nonatomic) enum JWInterfaceBehavior interfaceBehavior;
/// Available playback rates.
/// This property is automatically sorted. If an empty array is specified, 1.0 becomes the only available option. Rates must be greater than 0 and less than or equal to 4.0. Invalid rates are removed from the array.
/// The default rates are: [0.5, 1.0, 1.25, 1.5, 2.0]
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull playbackRates;
/// It enables the lock screen controls to be synchronized with the player. The default is <code>true</code>.
@property (nonatomic) BOOL enableLockScreenControls;
/// The number of seconds to wait when fading the interface. The default is 3 seconds.
/// note:
/// This only applies when <code>interfaceBehavior</code> is .normal.
@property (nonatomic) NSTimeInterval interfaceFadeDelay;
/// The poster image to display when there is no Internet connection. By default, it displays the poster image of the current video.
@property (nonatomic, strong) UIImage * _Nullable offlinePosterImage;
/// The message that is displayed when the internet connection is lost.
/// The default value is “This video cannot be played because of a problem with your internet connection.” which corresponds to the localizable string [jwplayer_errors_bad_connection].
@property (nonatomic, copy) NSString * _Nonnull offlineMessage;
/// Returns a Boolean indicating whether to automatically create Chromecast-related UI and update the UI based on Chromecast events.
/// Override this property in a subclass to signal your intention to not rely on the SDK’s default Chromecast UI integration.
///
/// returns:
/// <code>true</code> if your <code>JWPlayerViewController</code> subclass lets the SDK handle Chromecast-related UI creation and updates, or <code>false</code> if you intend to display on your own custom UI instead. The default value of this property returns <code>true</code>.
@property (nonatomic, readonly) BOOL handleCastingInternally;
/// The JWPlayer interface, used to control playback and configure the player.
@property (nonatomic, readonly, strong) id <JWPlayerProtocol> _Nonnull player;
/// The default ad interface style to use when presenting JWP VAST ads.
@property (nonatomic, strong) JWAdInterfaceStyle * _Nonnull adInterfaceStyle;
/// If true, the player will go full screen when rotated into landscape orientation. The default value is <code>true</code>.
@property (nonatomic) BOOL forceFullScreenOnLandscape;
/// If true, the player rotates into landscape when it goes into fullscreen. The default value is <code>true</code>.
@property (nonatomic) BOOL forceLandscapeOnFullScreen;
/// The style used to customize the player.
@property (nonatomic, strong) JWPlayerSkin * _Nullable styling;
/// The style defining the Next Up card and its behavior.
/// note:
/// If nil is set no Next Up card will be displayed.
@property (nonatomic, strong) JWNextUpStyle * _Nullable nextUpStyle;
/// Sets a custom logo to display on the player.
@property (nonatomic, strong) JWLogo * _Nullable logo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
/// Called after the controller’s view is loaded into memory. For more information, refer to <code>UIViewController</code> documentation.
- (void)viewDidLoad;
/// Called after the view controller is added or removed from a container view controller. For more information, refer to <code>UIViewController</code> documentation.
/// \param parent The parent view controller, or nil if there is no parent.
///
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
/// If your App supports iOS 12 and below, subclasses of JWPlayerViewController require runtime initialization before using it, they won’t be available for Storyboard or Nib use if you have not previously initialized the subclass.
/// note:
/// For more information on why this is needed <a href="https://swift.org/blog/library-evolution/#objective-c-interoperability">Swift Docs</a>
+ (void)registerController;
/// Notifies the container that the size of its view is about to change. For more information, refer to <code>UIViewController</code> documentation.
/// \param size The new size for the container’s view.
///
/// \param coordinator The transition coordinator object managing the size change. You can use this object to animate your changes or get information about the transition that is in progress.
///
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
/// This method transitions the player to fullscreen mode. If the player is already in fullscreen mode this method does not perform any actions, and the completion closure will not be executed.
/// \param animated Set to true if the player should animate into full screen.
///
/// \param completion This closure is called when the player is done transitioning to full screen mode.
///
- (void)transitionToFullScreenWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// This method transitions the player away from fullscreen mode. If the player is not in fullscreen mode this method does not perform any actions, and the completion closure will not be executed.
/// \param animated Set to true if the player should animate away from full screen mode.
///
/// \param completion This closure is called when the player is done transitioning away from full screen mode.
///
- (void)dismissFullScreenWithAnimated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
- (void)playerView:(JWPlayerView * _Nonnull)view sizeChangedFrom:(CGSize)oldSize to:(CGSize)newSize;
- (void)jwplayerIsReady:(id <JWPlayer> _Nonnull)player;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player failedWithError:(NSUInteger)code message:(NSString * _Nonnull)message;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player failedWithSetupError:(NSUInteger)code message:(NSString * _Nonnull)message;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player encounteredWarning:(NSUInteger)code message:(NSString * _Nonnull)message;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player encounteredAdError:(NSUInteger)code message:(NSString * _Nonnull)message;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player encounteredAdWarning:(NSUInteger)code message:(NSString * _Nonnull)message;
- (void)onMediaTimeEvent:(JWTimeData * _Nonnull)time;
- (void)onAdTimeEvent:(JWTimeData * _Nonnull)time;
- (void)jwplayerContentWillComplete:(id <JWPlayer> _Nonnull)player;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player willPlayWithReason:(enum JWPlayReason)reason;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player isBufferingWithReason:(enum JWBufferReason)reason;
- (void)jwplayerContentIsBuffering:(id <JWPlayer> _Nonnull)player;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player updatedBuffer:(double)percent position:(JWTimeData * _Nonnull)time;
- (void)jwplayerContentDidComplete:(id <JWPlayer> _Nonnull)player;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didFinishLoadingWithTime:(NSTimeInterval)loadTime;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player isPlayingWithReason:(enum JWPlayReason)reason;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player isAttemptingToPlay:(JWPlayerItem * _Nonnull)playlistItem reason:(enum JWPlayReason)reason;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didPauseWithReason:(enum JWPauseReason)reason;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didBecomeIdleWithReason:(enum JWIdleReason)reason;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player usesMediaType:(enum JWMediaType)type;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player isVisible:(BOOL)isVisible;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didLoadPlaylist:(NSArray<JWPlayerItem *> * _Nonnull)playlist;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didLoadPlaylistItem:(JWPlayerItem * _Nonnull)item at:(NSUInteger)index;
- (void)jwplayerPlaylistHasCompleted:(id <JWPlayer> _Nonnull)player;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player seekedFrom:(NSTimeInterval)oldPosition to:(NSTimeInterval)newPosition;
- (void)jwplayerHasSeeked:(id <JWPlayer> _Nonnull)player;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player playbackRateChangedTo:(double)rate at:(NSTimeInterval)time;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player updatedCues:(NSArray<JWCue *> * _Nonnull)cues;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didReceiveAccessLogMetadata:(JWAccessLogMetadata * _Nonnull)metadata;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player dateRangeMetadataCueParsed:(JWDateRangeMetadata * _Nonnull)metadata;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player dateRangeMetadata:(JWDateRangeMetadata * _Nonnull)metadata;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player id3Metadata:(JWID3Metadata * _Nonnull)metadata;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player externalMetadataCueParsed:(JWExternalMetadata * _Nonnull)metadata;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player externalMetadata:(JWExternalMetadata * _Nonnull)metadata;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player programDateTimeMetadataCueParsed:(JWProgramDateTimeMetadata * _Nonnull)metadata;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player programDateTimeMetadata:(JWProgramDateTimeMetadata * _Nonnull)metadata;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player didReceiveMediaMetadata:(JWMediaMetadata * _Nonnull)metadata;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player airPlayStatusChanged:(enum JWAirPlayStatus)status;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player audioTracksUpdated:(NSArray<JWMediaSelectionOption *> * _Nonnull)levels;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player audioTrackChanged:(NSInteger)currentLevel;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player qualityLevelsUpdated:(NSArray<JWVideoSource *> * _Nonnull)levels;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player qualityLevelChanged:(NSInteger)currentLevel;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player visualQualityChanged:(JWVisualQuality * _Nonnull)currentVisualQuality;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player updatedCaptionList:(NSArray<JWMediaSelectionOption *> * _Nonnull)options;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player captionTrackChanged:(NSInteger)index;
- (void)jwplayer:(id <JWPlayer> _Nonnull)player captionPresented:(NSArray<NSString *> * _Nonnull)caption at:(JWTimeData * _Nonnull)time;
- (void)jwplayer:(id _Nonnull)player adEvent:(JWAdEvent * _Nonnull)event;
/// Tells the delegate when Picture in Picture is about to start.
/// \param pictureInPictureController The Picture in Picture controller to which you’ve assigned the delegate.
///
- (void)pictureInPictureControllerWillStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
/// Tells the delegate that Picture in Picture playback has started.
/// \param pictureInPictureController The Picture in Picture controller to which you’ve assigned the delegate.
///
- (void)pictureInPictureControllerDidStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
/// Tells the delegate when Picture in Picture is about to stop.
/// \param pictureInPictureController The Picture in Picture controller to which you’ve assigned the delegate.
///
- (void)pictureInPictureControllerWillStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
/// Tells the delegate when Picture in Picture playback stops.
/// \param pictureInPictureController The Picture in Picture controller to which you’ve assigned the delegate.
///
- (void)pictureInPictureControllerDidStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
/// Tells the delegate when Picture in Picture is about to stop, to give your app an opportunity to restore its video playback user interface.
/// note:
/// Make sure to call the completion handler when you have restored the UI, it is important to notify the system of this.
/// \param pictureInPictureController The Picture in Picture controller to which you’ve assigned the delegate.
///
/// \param completionHandler To allow the system to finish restoring your user interface, you must call the completion handler with a value of <code>true</code>.
///
- (void)pictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Tells the delegate whether Picture in Picture failed to start.
/// \param pictureInPictureController The Picture in Picture controller to which you’ve assigned the delegate.
///
/// \param error An error describing why Picture in Picture failed to start.
///
- (void)pictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController failedToStartPictureInPictureWithError:(NSError * _Nonnull)error;
- (void)castController:(JWCastController * _Nonnull)controller devicesAvailable:(NSArray<JWCastingDevice *> * _Nonnull)devices;
- (void)castController:(JWCastController * _Nonnull)controller connectedTo:(JWCastingDevice * _Nonnull)device;
- (void)castController:(JWCastController * _Nonnull)controller disconnectedWithError:(NSError * _Nullable)error;
- (void)castController:(JWCastController * _Nonnull)controller connectionSuspendedWithDevice:(JWCastingDevice * _Nonnull)device;
- (void)castController:(JWCastController * _Nonnull)controller connectionRecoveredWithDevice:(JWCastingDevice * _Nonnull)device;
- (void)castController:(JWCastController * _Nonnull)controller connectionFailedWithError:(NSError * _Nonnull)error;
- (void)castController:(JWCastController * _Nonnull)controller castingBeganWithDevice:(JWCastingDevice * _Nonnull)device;
- (void)castController:(JWCastController * _Nonnull)controller castingFailedWithError:(NSError * _Nonnull)error;
- (void)castController:(JWCastController * _Nonnull)controller castingEndedWithError:(NSError * _Nullable)error;
/// Asks the delegate for the presentation style to use when the specified set of traits are active.
/// \param controller The presentation controller that is managing the size change. Use this object to retrieve the view controllers involved in the presentation.
///
/// \param traitCollection The traits representing the target environment.
///
- (UIModalPresentationStyle)adaptivePresentationStyleForPresentationController:(UIPresentationController * _Nonnull)controller traitCollection:(UITraitCollection * _Nonnull)traitCollection SWIFT_WARN_UNUSED_RESULT;
/// Notifies the delegate that an adaptivity-related transition is about to occur.
/// \param presentationController The presentation controller that is managing the adaptivity change.
///
/// \param style The new presentation style. If the presentation style is not changing, this parameter is set to <code>UIModalPresentationStyle.none</code>.
///
/// \param transitionCoordinator The transition coordinator that is managing the transition.
///
- (void)presentationController:(UIPresentationController * _Nonnull)presentationController willPresentWithAdaptiveStyle:(UIModalPresentationStyle)style transitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nullable)transitionCoordinator;
@end

enum JWVisibilityState : NSInteger;
@class NSNumber;

SWIFT_UNAVAILABLE
@interface JWPlayerViewController (SWIFT_EXTENSION(JWPlayerKit))
/// Sets the visibility of controls on the player’s interface.
/// Use the <code>JWControlType</code> enum to initialize a <code>NSNumber</code> object with the desired control type.
/// \code
/// [controller setVisibility:FALSE forControls:@[@(JWControlTypePictureInPictureButton)]]
///
/// \endcode\param isVisible The desired visibility of each control that is provided.
///
/// \param controls The controls to set the visibility of.
///
- (void)setVisibility:(enum JWVisibilityState)visibility forControls:(NSArray<NSNumber *> * _Nonnull)controls;
@end





enum JWRelatedInteraction : NSInteger;

/// Events within the JWPlayerViewController are routed to this delegate.
SWIFT_PROTOCOL("_TtP11JWPlayerKit30JWPlayerViewControllerDelegate_")
@protocol JWPlayerViewControllerDelegate
/// Called before the player is enlarged to the size of the screen.
/// \param controller The JWPlayerViewController emitting the event.
///
///
/// returns:
/// The <code>JWFullScreenViewController</code> that will be used for full screen. If nil is returned, will use the default <code>JWFullScreenViewController</code>.
- (JWFullScreenViewController * _Nullable)playerViewControllerWillGoFullScreen:(JWPlayerViewController * _Nonnull)controller SWIFT_WARN_UNUSED_RESULT;
/// Called after the player has enlarged to the size of the screen.
/// \param controller The JWPlayerViewController emitting the event.
///
- (void)playerViewControllerDidGoFullScreen:(JWPlayerViewController * _Nonnull)controller;
/// Called before the player dismisses full screen, and shrinks back to its normal size.
/// \param controller The JWPlayerViewController emitting the event.
///
- (void)playerViewControllerWillDismissFullScreen:(JWPlayerViewController * _Nonnull)controller;
/// Called after the player dismisses full screen, and shrinks back to its normal size.
/// \param controller The JWPlayerViewController emitting the event.
///
- (void)playerViewControllerDidDismissFullScreen:(JWPlayerViewController * _Nonnull)controller;
/// Called when the control bar is done hiding or showing itself.
/// \param controller The JWPlayerViewController emitting the event.
///
/// \param isVisible true, if the control bar has finished showing itself. false if it has finished hiding itself.
///
/// \param frame The frame of the visible control bar. If the control bar is not visible, CGRect.zero is returned.
///
- (void)playerViewController:(JWPlayerViewController * _Nonnull)controller controlBarVisibilityChanged:(BOOL)isVisible frame:(CGRect)frame;
/// Called when the player’s dimensions have changed.
/// \param controller The JWPlayerViewController emitting the resize event.
///
/// \param size The new size of the player on the screen.
///
- (void)playerViewController:(JWPlayerViewController * _Nonnull)controller sizeChangedFrom:(CGSize)oldSize to:(CGSize)newSize;
/// This method is triggered when the player is tapped. It is not triggered if the user tapped a button or other user interface element.
/// \param controller The JWPlayerViewController emitting the event.
///
/// \param position A position within the JWPlayerView that was tapped.
///
- (void)playerViewController:(JWPlayerViewController * _Nonnull)controller screenTappedAt:(CGPoint)position;
/// Reports when the related menu has opened.
/// \param controller The JWPlayerViewController related to the event.
///
/// \param items The playlist items displayed in the related menu.
///
/// \param method Why the menu closed. Possible values are .user and .contentComplete.
///
- (void)playerViewController:(JWPlayerViewController * _Nonnull)controller relatedMenuOpenedWithItems:(NSArray<JWPlayerItem *> * _Nonnull)items withMethod:(enum JWRelatedInteraction)method;
/// Reports when the related menu has closed.
/// \param controller The JWPlayerViewController related to the event.
///
/// \param method Why the menu closed. Possible values are .user and .autostart.
///
- (void)playerViewController:(JWPlayerViewController * _Nonnull)controller relatedMenuClosedWithMethod:(enum JWRelatedInteraction)method;
/// Reports when content in the related menu has begun playing.
/// \param controller The JWPlayerViewController related to the event.
///
/// \param item The playlist item which has begun playing.
///
/// \param index The index the playlist item was at in the related menu’s feed.
///
/// \param method Why the item began playing. Possible values are .user and .autostart.
///
- (void)playerViewController:(JWPlayerViewController * _Nonnull)controller relatedItemBeganPlaying:(JWPlayerItem * _Nonnull)item atIndex:(NSInteger)index withMethod:(enum JWRelatedInteraction)method;
@end



/// Preloading behavior for content.
typedef SWIFT_ENUM(NSInteger, JWPreload, open) {
/// Preloading is enabled.
  JWPreloadAuto = 0,
/// Preloading is disabled.
  JWPreloadNone = 1,
};


/// Program-date-time metadata. Fires when playback enters the section of an HLS
/// stream tagged with #EXT-X-PROGRAM-DATE-TIME.
SWIFT_CLASS("_TtC11JWPlayerKit25JWProgramDateTimeMetadata")
@interface JWProgramDateTimeMetadata : NSObject
/// Start time of the cue seconds relative to the current time of the stream
@property (nonatomic, readonly) NSTimeInterval start;
/// End time of the cue in seconds relative to the current time of the stream
@property (nonatomic, readonly) NSTimeInterval end;
/// Date and time of the program metadata
@property (nonatomic, readonly, copy) NSDate * _Nonnull programDateTime;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A configuration object for handling related content loading and display.
SWIFT_CLASS("_TtC11JWPlayerKit29JWRelatedContentConfiguration")
@interface JWRelatedContentConfiguration : NSObject
/// Initializer is overridden in order to prevent external developers from creating a configuration of their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum JWRelatedOnComplete : NSInteger;
enum JWRelatedOnClick : NSInteger;

/// The builder for JWRelatedContentConfiguration.
SWIFT_CLASS("_TtC11JWPlayerKit36JWRelatedContentConfigurationBuilder")
@interface JWRelatedContentConfigurationBuilder : NSObject
/// Builds a <code>JWRelatedContentConfiguration</code> structure.
/// <ul>
///   <li>
///     throws An error if the configuration is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWRelatedContentConfiguration</code> object.
///   </li>
/// </ul>
- (JWRelatedContentConfiguration * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
/// Sets the related content url using a URL.
/// \param url The URL of the related content.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWRelatedContentConfigurationBuilder * _Nonnull)url:(NSURL * _Nonnull)url;
/// Sets the related content heading using a String. The default value is “Next up”.
/// note:
/// The string provided is displayed as a literal, and is not looked up in a localized string table.
/// \param heading The heading String.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWRelatedContentConfigurationBuilder * _Nonnull)heading:(NSString * _Nonnull)heading;
/// Sets the related content autoplayMessage using a String. The default value is “<em>title</em> will play in xx seconds”.
/// note:
/// xx will be replaced by the countdown timer
/// note:
/// <em>title</em> will be replaced by the next title in the related feed.
/// note:
/// The string provided is displayed as a literal, and is not looked up in a localized string table.
/// \param message The string message.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWRelatedContentConfigurationBuilder * _Nonnull)autoplayMessage:(NSString * _Nonnull)message;
/// Sets the related content onComplete action using a JWRelatedOnComplete. The default value is <code>.none</code>.
/// \param relatedOnComplete the onComplete action
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWRelatedContentConfigurationBuilder * _Nonnull)onComplete:(enum JWRelatedOnComplete)relatedOnComplete;
/// Sets the related content onClick action using a JWRelatedOnClick. The default value is <code>.play</code>.
/// \param relatedOnClick the onClick action
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWRelatedContentConfigurationBuilder * _Nonnull)onClick:(enum JWRelatedOnClick)relatedOnClick;
/// Sets the related content autoplayTimer using a Int. The default value is 10 seconds.
/// \param timer the number of seconds of the timer.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWRelatedContentConfigurationBuilder * _Nonnull)autoplayTimer:(NSInteger)timer;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Constants representing observed interactions with the related menu.
typedef SWIFT_ENUM(NSInteger, JWRelatedInteraction, open) {
/// The user has interacted with the menu.
  JWRelatedInteractionUser = 0,
/// The end of the content was reached, and the menu was interacted with automatically.
  JWRelatedInteractionContentComplete = 1,
/// Content began playing, so the menu’s state changed.
  JWRelatedInteractionAutostart = 2,
};

/// Constants describing what action is performed when a related video is tapped.
typedef SWIFT_ENUM(NSInteger, JWRelatedOnClick, open) {
/// Plays the related content which was tapped.
  JWRelatedOnClickPlay = 0,
/// Opens a browser, and goes to the link provided. Current unsupported.
  JWRelatedOnClickLink = 1,
};

/// Constants describing what action to perform when a playlist item completes.
typedef SWIFT_ENUM(NSInteger, JWRelatedOnComplete, open) {
/// Show the related overlay.
  JWRelatedOnCompleteShow = 0,
/// Only related icon will appear alongside the replay button.
  JWRelatedOnCompleteHide = 1,
/// Shows the related overlay. Automatically plays the next related video in the related feed after a delay.
  JWRelatedOnCompleteAutoplay = 2,
/// No overlay appears and player automatically advances to the next playlist item. If there is no media item to advance to, the replay button appears.
  JWRelatedOnCompleteNone = 3,
};


/// The builder for creating a JWMediaTrack used for thumbnails.
SWIFT_CLASS("_TtC11JWPlayerKit23JWThumbnailTrackBuilder")
@interface JWThumbnailTrackBuilder : NSObject
/// Builds a media track based off the settings provided.
/// <ul>
///   <li>
///     throws An error if the track is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWMediaTrack</code> object.
///   </li>
/// </ul>
- (JWMediaTrack * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the path to the thumbnail track file.
/// note:
/// Files must be in WebVTT format, these VTT files contain links to the actual thumbnail images, which can be in JPG, PNG or GIF format.
/// \param file Path to the thumbnail track file.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWThumbnailTrackBuilder * _Nonnull)file:(NSURL * _Nonnull)file;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines time information.
SWIFT_CLASS("_TtC11JWPlayerKit10JWTimeData")
@interface JWTimeData : NSObject
/// A time expressed in seconds within a maxmium value of <code>duration</code> .
@property (nonatomic) NSTimeInterval position;
/// The total time expressed in seconds.
@property (nonatomic) NSTimeInterval duration;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Defines time range information.
SWIFT_CLASS("_TtC11JWPlayerKit11JWTimeRange")
@interface JWTimeRange : NSObject
/// The start time of the time range, expressed in seconds.
@property (nonatomic, readonly) NSTimeInterval start;
/// The end time of the time range, expressed in seconds.
@property (nonatomic, readonly) NSTimeInterval end;
/// An integer hash representing the time range.
@property (nonatomic, readonly) NSUInteger hash;
/// Default initializer. Both <code>start</code> and <code>end</code> are zero.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializer for setting <code>start</code> and <code>end</code>.
/// \param start The start of the timer range, expressed in seconds.
///
/// \param end The end of the time range, expressed in seconds.
///
- (nonnull instancetype)initWithStart:(NSTimeInterval)start end:(NSTimeInterval)end OBJC_DESIGNATED_INITIALIZER;
@end


/// Defines the style for the control bar on a player.
SWIFT_CLASS("_TtC11JWPlayerKit17JWTimeSliderStyle")
@interface JWTimeSliderStyle : NSObject
/// This init is internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The builder for JWTimeSliderStyle.
SWIFT_CLASS("_TtC11JWPlayerKit24JWTimeSliderStyleBuilder")
@interface JWTimeSliderStyleBuilder : NSObject
/// Builds a <code>JWTimeSliderStyle</code> modeled after the specified parameters.
/// <ul>
///   <li>
///     throws An error if the style is not setup properly.
///   </li>
/// </ul>
///
/// returns:
/// A <code>JWTimeSliderStyle</code> object with the provided parameters.
- (JWTimeSliderStyle * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the color of the slider.
/// \param maximumTrackColor The color for the slider.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWTimeSliderStyleBuilder * _Nonnull)maximumTrackColor:(UIColor * _Nonnull)maximumTrackColor;
/// Sets the color of the rail denoting progress.
/// \param minimumTrackColor The color for the rail denoting progress.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWTimeSliderStyleBuilder * _Nonnull)minimumTrackColor:(UIColor * _Nonnull)minimumTrackColor;
/// Sets the color of the draggable thumb.
/// \param thumbColor The color for the draggable thumb.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWTimeSliderStyleBuilder * _Nonnull)thumbColor:(UIColor * _Nonnull)thumbColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Constants denoting the type of JWTrack.
typedef SWIFT_ENUM(NSInteger, JWTrackType, open) {
/// Track type is undefined. This is used in case of an error.
  JWTrackTypeUndefined = -1,
/// Track is audio.
  JWTrackTypeAudio = 0,
/// Track is closed captions.
  JWTrackTypeClosedCaption = 1,
/// Track is subtitles.
  JWTrackTypeSubtitle = 2,
};

/// How to display video content within the bounds of a view.
typedef SWIFT_ENUM(NSInteger, JWVideoGravity, open) {
/// The player should preserve the video’s aspect ratio and fit the video within the view’s bounds.
  JWVideoGravityResizeAspect = 0,
/// The player should preserve the video’s aspect ratio and fill the view’s bounds.
  JWVideoGravityResizeAspectFill = 1,
/// The video should be stretched to fill the view’s bounds.
  JWVideoGravityResize = 2,
};


/// Defines a video source which represents a visual quality level of the video.
SWIFT_CLASS("_TtC11JWPlayerKit13JWVideoSource")
@interface JWVideoSource : NSObject
/// The URL of the video source.
@property (nonatomic, readonly, copy) NSURL * _Null_unspecified file;
/// A label which represents the visual quality level of the video source.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified label;
/// Determines whether the video source is the default. The default value is <code>false</code>.
@property (nonatomic, readonly) BOOL defaultVideo;
/// This init is internal so external developers cannot create this structure on their own.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Overridden to provide more accurate value comparisons.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


/// The builder for JWVideSource.
SWIFT_CLASS("_TtC11JWPlayerKit20JWVideoSourceBuilder")
@interface JWVideoSourceBuilder : NSObject
/// Builds a <code>JWVideoSource</code> structure.
/// <ul>
///   <li>
///     throws An error if the source is not setup properly.
///   </li>
///   <li>
///     returns A <code>JWVideoSource</code> object.
///   </li>
/// </ul>
- (JWVideoSource * _Nullable)buildAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Sets the video source using a URL.
/// \param file The URL of the video source.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWVideoSourceBuilder * _Nonnull)file:(NSURL * _Nonnull)file;
/// Sets the label which represents the quality level of the video source.
/// note:
/// The string provided is displayed as a literal, and is not looked up in a localized string table.
/// \param label A string to be shown in the quality level menu.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWVideoSourceBuilder * _Nonnull)label:(NSString * _Nonnull)label;
/// Sets the defaultVideo which determines whether the video source is the default. The default value is <code>false</code>.
/// \param defaultVideo A boolean flag which determines whether the video source is the default.
///
///
/// returns:
/// The builder, so setters can be chained.
- (JWVideoSourceBuilder * _Nonnull)defaultVideo:(BOOL)defaultVideo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Possible visibility states for UI elements.
typedef SWIFT_ENUM(NSInteger, JWVisibilityState, open) {
/// The element is completely hidden.
  JWVisibilityStateHidden = 0,
/// The element is completely visible.
  JWVisibilityStateVisible = 1,
};

enum JWVisualQualityReason : NSInteger;
enum JWVisualQualityMode : NSInteger;
@class JWVisualQualityLevel;

/// <code>JWVisualQuality</code> represents the quality of a video stream.
SWIFT_CLASS("_TtC11JWPlayerKit15JWVisualQuality")
@interface JWVisualQuality : NSObject
/// The reason that a quality was selected.
@property (nonatomic, readonly) enum JWVisualQualityReason reason;
/// The current type of quality selection.
@property (nonatomic, readonly) enum JWVisualQualityMode mode;
/// The bitrate of the current selected quality. The value of this property is negative if unknown.
@property (nonatomic, readonly) double bitrate;
/// Information about the current selected quality.
@property (nonatomic, readonly, strong) JWVisualQualityLevel * _Nonnull level;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A description of a video quality level.
SWIFT_CLASS("_TtC11JWPlayerKit20JWVisualQualityLevel")
@interface JWVisualQualityLevel : NSObject
/// The index of the visual quality level. The default value is 0 for HLS.
@property (nonatomic, readonly) NSInteger index;
/// The natural dimensions in pixels of the visual quality level.
@property (nonatomic, readonly) CGSize size;
/// A human-readable identifier for visual quality level.
@property (nonatomic, readonly, copy) NSString * _Nonnull label;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Constants representing how the player manages switching between different quality video tracks.
typedef SWIFT_ENUM(NSInteger, JWVisualQualityMode, open) {
/// Automatic quality switching.
  JWVisualQualityModeAuto = 0,
/// Static quality.
  JWVisualQualityModeManual = 1,
};

/// Constants denoting the reason for quality changing in a video.
typedef SWIFT_ENUM(NSInteger, JWVisualQualityReason, open) {
/// The user had this quality set as a default and did not change it.
  JWVisualQualityReasonInitial = 0,
/// An automatic quality change occurred (ex. HLS).
  JWVisualQualityReasonAuto = 1,
/// The user chose a static quality after playback began, or an API was used to set it.
  JWVisualQualityReasonApi = 2,
};






















@class UIEvent;

@interface UIStackView (SWIFT_EXTENSION(JWPlayerKit))
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end









#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
